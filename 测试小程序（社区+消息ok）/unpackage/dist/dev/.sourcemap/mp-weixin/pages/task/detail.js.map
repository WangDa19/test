{"version":3,"sources":["uni-app:///main.js",null,"webpack:///H:/测试小程序/pages/task/detail.vue?e644","webpack:///H:/测试小程序/pages/task/detail.vue?6699","webpack:///H:/测试小程序/pages/task/detail.vue?4da2","uni-app:///pages/task/detail.vue","webpack:///H:/测试小程序/pages/task/detail.vue?1142","webpack:///H:/测试小程序/pages/task/detail.vue?f454"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","components","CommentPopup","data","userId","postId","detail","_id","content","images","commentCount","likeCount","shareCount","isLiked","userInfo","nickname","avatar","comments","replyInfo","page","pageSize","loadingStatus","sortType","activeTab","likeUsers","commentsPage","commentsPageSize","commentsLoading","commentsFinished","isFollowing","followLoading","currentUserId","targetCommentId","highlightedCommentId","pendingHighlightId","toComment","showUserSearchBox","userSearchKeyword","userSearchResults","userSearchLoading","mentionedUsers","likeUsersLoading","isDetailLoading","hasInitialized","commentsLoaded","likeLoading","loadingComments","hasMoreComments","postData","onShowLoadingLock","__DEV__","onLoad","console","onShow","methods","loadDetailAndComments","setTimeout","loadDetail","uniCloud","name","timestamp","res","uni","title","icon","loadLikeUsersWithoutUpdatingCount","retryCount","maxRetries","loadLikeUsersWithRetry","type","updateCount","timeout","count","displayCount","cachedLikeUsers","Array","Date","loadComments","refresh","likedComments","commentIds","likeResult","likedCommentIds","comment","handleCommentSubmit","mentionRegex","matches","mentions","mentionedUserIds","nicknames","userResult","commentData","parentId","replyTo","status","imageUrl","result","replyComment","autoAt","atNickname","showCommentPopup","checkFollowStatus","targetUserId","oldFollowState","newFollowState","followedUsers","toggleFollow","success","fail","toggleFollowAction","previousFollowState","diff","showCommentActions","itemList","deleteComment","resolve","confirmRes","commentId","handleLike","previousLikeState","previousCount","likedPosts","targetId","likeComment","previousLiked","newLikeState","animateLike","query","fields","node","size","setSortType","duration","sortComments","previewImage","urls","current","previewCommentImage","gotoUserPage","mask","forceUpdate","url","loadMoreComments","formatTime","switchTab","scrollToComments","scrollRes","scrollTop","loadLikeUsers","incompleteUserCount","syncLikeCount","actualCount","scrollToComment","highlightComment","formatCommentContent","handleCommentInput","searchUsers","keyword","limit","handleUserSearchInput","selectUserToMention","id","position","checkRendering","debugComments","显示加载中","显示空状态","显示评论列表","debugState","总数","加载中","当前页","全部加载完毕","debugCommentData","hasContent","contentLength","showCancel","handleImageError","validateImageUrl","debugCommentImages","hasImage","logCommentImages","hasImages","图片URL","正文","action","table","debugImageRendering","imageURL","img","refreshLikeState","fetchPostLikeCount","syncLikeStateFromStorage","handleUserAvatarError","user","debugFollowStatus","syncLikeStatus","editPost"],"mappings":";;;;;;;;;;;;;AAAA;AAE2D;AAC3D;AACA;AAHA;AACAA,EAAE,CAACC,iCAAiC,GAAGC,mBAAmB;AAG1DC,UAAU,CAACC,eAAI,CAAC,C;;;;;;;;;;;;;ACLhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmH;AACnH;AAC0D;AACL;AACa;;;AAGlE;AACqK;AACrK,gBAAgB,+KAAU;AAC1B,EAAE,4EAAM;AACR,EAAE,iFAAM;AACR,EAAE,0FAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,qFAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,aAAa,sNAEN;AACP,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAgmB,CAAgB,0nBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCgRpnB;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;UACAP;UACAQ;UACAC;QACA;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MAAA;MACAC;MACAC;MACAC;MACAC;MACAC;MA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AA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAsE;MAAA;MACA;MACA;MACAC,mGACAC;QAAAC;QAAAC;MAAA;QACA;QACA;QACA;QACA;UAAA;QAAA;QACA;UACA;UACA1E;YACA;UACA;QACA;MACA;IACA;IAEA;IACA2E;MACA;MAEA;MACA;MAEArE;QACAC;QACAC;QACAoE;MACA;IACA;IAEA;IACAC;MACA;MAEA;QACA;QACA;UACA;QACA;MACA;QACA;QACA;UACA;UACA;UACA;UACA;QACA;MACA;IACA;IAEA;IACAC;MACAxE;QACAyE;QACAC;MACA;IACA;IAEA;IACAC;MACA3E;QACAyE;QACAC;MACA;IACA;IAEA;IACAE;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACAtI;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAEA;gBACA0D;kBACAC;kBACA4E;gBACA;gBAAA;gBAAA;gBAAA,OAIAjF;kBACAC;kBACAxD;oBACAC;oBACAwI;kBACA;kBACArE;gBACA;cAAA;gBAPAV;gBASA;gBACAC;gBAAA,MAEAD;kBAAA;kBAAA;gBAAA;gBACA;gBACAC;kBACA+E;kBACAjC;oBACAxD;oBACA;oBACAU;sBACA+E;sBACAjC;wBACA;wBACA9C;0BACAC;0BACAC;wBACA;sBACA;oBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA,MAEA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAGAZ;gBACAU;gBAEAA;kBACAC;kBACAC;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACA8E;MACA1F;;MAEA;MACA;QACAA,yBACA;QACA;MACA;MAEAA;MACA;MACA;IACA;IAEA;IACA2F;MACA;MAEA;MACA;MACA;MAEA;QACA;MACA;QACA;MACA;QACA;MACA;QACA;MACA;QACA;QACA;QACA;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA;MAEA;QACA;UACA;QACA;MACA;QACA;UACA;UACA;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA;MACA;MACAlB;MACAA;MACAA;QAAA;UAAAlE;UAAAqF;QACA;UACApF;YACAqF;YAAA;YACAf;UACA;QACA;MACA;IACA;IAEA;IACAgB;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACA/I;kBAAA;kBAAA;gBAAA;gBACA+C;gBAAA;cAAA;gBAAA,KAKA;kBAAA;kBAAA;gBAAA;gBACAA;gBAAA;cAAA;gBAIA;;gBAEA;gBACAc;gBACAC;gBAEAC;kBAAA;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAAA;4BAEAhB;4BAEA;8BACAU;gCACAC;gCACA4E;8BACA;4BACA;4BAAA;4BAAA,OAEAjF;8BACAC;8BACAxD;gCACAE;gCACAgE;gCACAT;8BACA;;8BACAW;4BACA;0BAAA;4BARAV;4BAUAT;4BAAA,MAEAS;8BAAA;8BAAA;4BAAA;4BACA;4BACArC,mEAEA;4BACA;8BACA4B;4BACA;;4BAEA;4BACAiG;4BACA7H;8BACA;gCACA6H;gCACAjG;8BACA;4BACA;;4BAEA;4BAAA,MACAiG;8BAAA;8BAAA;4BAAA;4BACAjG;4BACAc;;4BAEA;4BAAA;4BAAA,OACA;8BAAA;4BAAA;0BAAA;4BAAA;4BAAA,OACAE;0BAAA;4BAAA;0BAAA;4BAGA;4BACAhB;;4BAEA;4BACA;8BACAA;8BACA;4BACA;4BACA;4BAAA,KACA;8BACAA;8BACA;4BACA;;4BAEA;4BACA;8BACAU;gCACA3D;gCACAyD;gCACAY;8BACA;4BACA;8BACApB;4BACA;4BAAA;4BAAA;0BAAA;4BAAA,MAEA;0BAAA;4BAAA;4BAAA;0BAAA;4BAAA;4BAAA;4BAGAA;;4BAEA;4BAAA,MACAc;8BAAA;8BAAA;4BAAA;4BACAd;4BACAc;;4BAEA;4BAAA;4BAAA,OACA;8BAAA;4BAAA;0BAAA;4BAAA;4BAAA,OACAE;0BAAA;4BAAA;0BAAA;4BAGA;4BACAhB;4BACAsB;4BAEA,+CACAC,uCACAC;8BAAA;8BACAxB;8BACA;;8BAEA;8BACA;gCACAA;gCACA;8BACA;4BACA;8BACA;8BACA;8BACAU;gCACAC;gCACAC;8BACA;4BACA;0BAAA;4BAAA;4BAEAF;4BACA;4BAAA;0BAAA;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAEA;kBAAA,gBAtHAM;oBAAA;kBAAA;gBAAA,KAwHA;gBAAA;gBAAA,OACAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IAEA;IACAkF;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA5F;kBACAC;kBACAxD;oBACAE;oBACAkJ;oBACA3F;kBACA;gBACA;cAAA;gBACAR;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAoG;MAAA;MACApG;MACA;MACA;;MAEA;MACA2E;QACA;;QAEA;QACA;UAAA;QAAA;QAEA;UACA;;UAEA;UACAjE;YACAqF;YAAA;YACAf;UACA;;UAEA;UACA;QACA;MACA;IACA;IAEA;IACAqB;MAAA;MACA;;MAEA;MACAjG;QACA;MACA;IACA;IAEA;IACAkG;MACA;;MAEA;MACA;IACA;IAEA;IACAC;MACA;MACA;;MAEA;MACA;QACA;QACA;QACA;MACA;IACA;IAEA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACA;gBAAA;gBAAA;gBAAA,OAGAlG;kBACAC;kBACAxD;oBACA0J;oBACAC;kBACA;gBACA;cAAA;gBANAjG;gBAQA;kBACA;gBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAT;gBACA;cAAA;gBAAA;gBAEA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACA2G;MACA;MACA;IACA;IAEA;IACAC;MACA;MACA;QACA;QACA;QACA;QACA;QAEA;UACA;UACA;UACA;;UAEA;UACA;YACAC;YACAlJ;YACAmJ;UACA;QACA;MACA;;MAEA;MACA;IACA;IAEA;IACAC;MACA/G;MACAA;MACAA;MACAA;MACAA;MAEA;QACAA;QACA;MACA;IACA;IAEA;IACAgH;MACAhH;MACAA;MACAA;MACAA;MACAA;MACAA;;MAEA;MACA;MACA;MACA;MAEAA;QACAiH;QACAC;QACAC;MACA;IACA;IAEA;IACAC;MACApH;MACAA;QACA7B;QACAmB;QACAC;QACAC;MACA;MAEAQ;QACAqH;QACAC;QACAC;QACAC;MACA;MAEAxH;QACAqH;QACAC;MACA;MACAtH;IACA;IAEA;IACAyH;MACA;QACA/G;UACAC;UACAC;QACA;QACA;MACA;MAEA;MACA;QACAiG;QACAzJ;QACAsK;QACAC;QACAjK;MACA;MAEAsC;;MAEA;MACAU;QACAC;QACAvD;QACAwK;MACA;IACA;IAEA;IACAC;MACA7H;MACA+B;MACA;IACA;IAEA;IACA+F;MACA;;MAEA;MACA;;MAEA;MACA;MAEA;IACA;IAEA;IACAC;MACA/H;MACA;QAAA;QACAA;UACA6G;UACA7J;UACAI;UACA4K;QACA;MACA;;MAEA;MACAtH;QACAC;QACAvD;UAAA;QAAA;QACAwK;MACA;IACA;IAEA;IACAK;MACA;MACAjI;MACA;MAEA;QACA;UACAkI;UACAlI;YACA6G;YACAsB;YACAC;UACA;QACA;MACA;MAEA;QACApI;MACA;;MAEA;MACAM;QACAC;QACAxD;UACAsL;UACAC;UACA5B;QACA;MACA;QACA1G;MACA;QACAA;MACA;IACA;IAEA;IACAuI;MACAvI;;MAEA;MACA;QAAA;QACAA;UACA6G;UACAzJ;UACA4K;UACAQ;QACA;MACA;;MAEA;MACA;QAAA;MAAA;MACAxI;;MAEA;MACA;QACA;QACAA;;QAEA;QACA;QACAyI;UAAA;QAAA;QACAA;UAAA;QAAA;QACAA;MACA;IACA;IAEA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,MAEA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA,OAGApI;kBACAC;kBACAxD;oBACAC;oBACAsH;oBACArD;oBACAT;kBACA;gBACA;cAAA;gBARAC;gBAUA;kBACA;kBACAhD,qCAEA;kBACA;oBACAuC;oBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACA2I;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA,OAGArI;kBACAC;kBACAxD;oBACAE;oBACAD;oBACA4H;kBACA;gBACA;cAAA;gBAPAnE;gBASA;kBACA;kBACA;oBACAT;oBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACA4I;MACA;MAEA;QACA;QACA;;QAEA;QACA;UACA;UACA;UACA;QACA;UACA;UACA;QACA;MACA;QACA5I;MACA;IACA;IAEA;IACA6I;MACA;QACA;QACAC;;QAEA;QACA9I;MACA;IACA;IAEA;IACA+I;MAAA;QAAA;QAAA;QAAA;QAAA;MACA/I;MACAA;MACAA;MACAA;;MAEA;MACA;MACA;MACAA;;MAEA;MACA;QACAA;QACAU;UACAC;UACAC;QACA;MACA;IACA;IAEA;IACAoI;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAhJ;gBAAA;gBAAA,OACAM;kBACAC;kBACAxD;oBACAC;oBACAsH;oBACArD;oBACAxD;oBAAA;oBACA+C;kBACA;gBACA;cAAA;gBACAR;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAiJ;MACAvI;QACA+E;MACA;IACA;EACA;AACA;AAAA,2B;;;;;;;;;;;;;AC/jEA;AAAA;AAAA;AAAA;AAAk3B,CAAgB,m3BAAG,EAAC,C;;;;;;;;;;;ACAt4B;AACA,OAAO,KAAU,EAAE,kBAKd","file":"pages/task/detail.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;import '@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js';\nimport Vue from 'vue'\nimport Page from './pages/task/detail.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./detail.vue?vue&type=template&id=0417eeb2&\"\nvar renderjs\nimport script from \"./detail.vue?vue&type=script&lang=js&\"\nexport * from \"./detail.vue?vue&type=script&lang=js&\"\nimport style0 from \"./detail.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\runtime\\\\componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/task/detail.vue\"\nexport default component.exports","export * from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\templateLoader.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--17-0!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\template.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-app-loader\\\\page-meta.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=template&id=0417eeb2&\"","var components\ntry {\n  components = {\n    commentPopup: function () {\n      return import(\n        /* webpackChunkName: \"components/comment-popup/comment-popup\" */ \"@/components/comment-popup/comment-popup.vue\"\n      )\n    },\n  }\n} catch (e) {\n  if (\n    e.message.indexOf(\"Cannot find module\") !== -1 &&\n    e.message.indexOf(\".vue\") !== -1\n  ) {\n    console.error(e.message)\n    console.error(\"1. 排查组件名称拼写是否正确\")\n    console.error(\n      \"2. 排查组件是否符合 easycom 规范，文档：https://uniapp.dcloud.net.cn/collocation/pages?id=easycom\"\n    )\n    console.error(\n      \"3. 若组件不符合 easycom 规范，需手动引入，并在 components 中注册该组件\"\n    )\n  } else {\n    throw e\n  }\n}\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  var m0 =\n    _vm.detail && _vm.detail.userInfo\n      ? _vm.formatTime(_vm.detail.createTime)\n      : null\n  var g0 = _vm.detail ? _vm.detail.images && _vm.detail.images.length > 0 : null\n  var g1 = _vm.activeTab === \"like\" && _vm.likeUsers.length > 0\n  var g2 = g1 ? _vm.likeUsers.length : null\n  var g3 = _vm.activeTab === \"comment\" && _vm.comments.length > 0\n  var g4 =\n    _vm.activeTab === \"comment\"\n      ? _vm.commentsLoading && !_vm.comments.length\n      : null\n  var g5 = _vm.activeTab === \"comment\" && !g4 ? _vm.comments.length : null\n  var l0 =\n    _vm.activeTab === \"comment\" && !g4 && !!g5\n      ? _vm.__map(_vm.comments, function (comment, index) {\n          var $orig = _vm.__get_orig(comment)\n          var m1 =\n            comment.status !== 0 ? _vm.formatTime(comment.createTime) : null\n          return {\n            $orig: $orig,\n            m1: m1,\n          }\n        })\n      : null\n  var g6 =\n    _vm.activeTab === \"like\"\n      ? _vm.likeUsersLoading && !_vm.likeUsers.length\n      : null\n  var g7 = _vm.activeTab === \"like\" && !g6 ? _vm.likeUsers.length : null\n  var g8 = _vm.showUserSearchBox\n    ? !_vm.userSearchLoading && _vm.userSearchResults.length === 0\n    : null\n  if (!_vm._isMounted) {\n    _vm.e0 = function ($event) {\n      _vm.replyInfo = null\n    }\n  }\n  _vm.$mp.data = Object.assign(\n    {},\n    {\n      $root: {\n        m0: m0,\n        g0: g0,\n        g1: g1,\n        g2: g2,\n        g3: g3,\n        g4: g4,\n        g5: g5,\n        l0: l0,\n        g6: g6,\n        g7: g7,\n        g8: g8,\n      },\n    }\n  )\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--13-1!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--13-1!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=script&lang=js&\"","<template>\n  <view class=\"container\">\n    <scroll-view class=\"content-scroll\" scroll-y @scrolltolower=\"loadMoreComments\" scroll-with-animation>\n      <!-- 用户信息 -->\n      <view class=\"user-info\" v-if=\"detail && detail.userInfo\">\n        <view class=\"user-left\">\n          <image class=\"avatar\" :src=\"detail.userInfo.avatar || '/static/images/default-avatar.png'\" @tap=\"gotoUserPage(detail.userInfo._id)\"></image>\n        <view class=\"user-meta\">\n            <text class=\"nickname\">{{detail.userInfo.nickname || '用户'}}</text>\n            <text class=\"time\">{{formatTime(detail.createTime)}}</text>\n        </view>\n        </view>\n        <view class=\"user-right\">\n          <!-- 只有当访问者不是帖子作者时才显示关注按钮 -->\n          <button \n            class=\"follow-btn\"\n            :class=\"{'following': isFollowing}\"\n            @tap=\"toggleFollow\"\n            v-if=\"userId && detail.userInfo && userId !== detail.userInfo._id\"\n          >\n            <text class=\"follow-icon-text\" v-if=\"!isFollowing\">+</text>\n            <text class=\"follow-icon-text\" v-else>✓</text>\n            <text>{{isFollowing ? '已关注' : '关注'}}</text>\n          </button>\n        </view>\n      </view>\n\n      <!-- 内容区 -->\n      <view class=\"content\" v-if=\"detail\">\n        <view class=\"content-text\" v-if=\"detail.content\">{{detail.content}}</view>\n        <view class=\"image-grid\" v-if=\"detail.images && detail.images.length > 0\">\n          <image \n            v-for=\"(image, index) in detail.images\" \n            :key=\"index\"\n            :src=\"image\" \n            mode=\"aspectFill\"\n            @tap=\"previewImage(index)\"></image>\n        </view>\n          </view>\n\n      <!-- 互动栏 -->\n      <view class=\"action-bar\">\n        <view class=\"action-item comment\">\n          <image src=\"/static/images/icons/pinglun.png\" mode=\"aspectFit\" class=\"action-icon\"/>\n          <text>{{detail.commentCount || 0}}</text>\n          <text>评论</text>\n        </view>\n        <view class=\"action-item like\" @tap=\"handleLike\">\n          <image \n            :src=\"detail.isLiked ? '/static/images/heart-filled.png' : '/static/images/heart.png'\"\n            mode=\"aspectFit\"\n            class=\"action-icon\"\n            :class=\"{'liked': detail.isLiked}\"\n          />\n          <text :class=\"{'liked': detail.isLiked}\">\n            {{activeTab === 'like' && likeUsers.length > 0 ? likeUsers.length : (detail.likeCount > 0 ? detail.likeCount : '点赞')}}\n          </text>\n        </view>\n      </view>\n\n    <!-- 评论区 -->\n    <view class=\"comment-section\">\n      <view class=\"comment-header\">\n        <view class=\"header-tabs\">\n          <view \n            class=\"tab-item\" \n            :class=\"{'active': activeTab === 'comment'}\" \n            @tap=\"switchTab('comment')\"\n          >\n            <text>评论 {{detail.commentCount || 0}}</text>\n        </view>\n          <view \n            class=\"tab-item\" \n            :class=\"{'active': activeTab === 'like'}\" \n            @tap=\"switchTab('like')\"\n          >\n            <text>点赞 {{detail.likeCount || 0}}</text>\n        </view>\n        </view>\n        <view class=\"comment-filter\" v-if=\"activeTab === 'comment' && comments.length > 0\">\n          <view class=\"comment-sort-options\">\n            <view \n              class=\"sort-option\" \n              :class=\"{'active': sortType === 'time'}\" \n              @tap=\"setSortType('time')\"\n            >\n              <text>按时间</text>\n            </view>\n            <view \n              class=\"sort-option\" \n              :class=\"{'active': sortType === 'hot'}\" \n              @tap=\"setSortType('hot')\"\n            >\n              <text>按热度</text>\n            </view>\n          </view>\n      </view>\n    </view>\n\n      <!-- 评论列表 -->\n      <view class=\"comment-list\" v-if=\"activeTab === 'comment'\">\n        <!-- 加载状态 -->\n        <view class=\"loading-state\" v-if=\"commentsLoading && !comments.length\">\n          <uni-icons type=\"spinner-cycle\" size=\"24\" color=\"#999\"></uni-icons>\n          <text>加载评论中...</text>\n      </view>\n      \n        <!-- 空状态 -->\n        <view class=\"empty-state\" v-else-if=\"!comments.length\">\n          <text class=\"empty-text\">暂无评论，快来发表第一条评论吧</text>\n        </view>\n        \n        <!-- 评论列表 -->\n        <view class=\"comment-items\" v-else>\n        <view \n          class=\"comment-item\" \n            v-for=\"(comment, index) in comments\" \n          :key=\"comment._id\"\n            :class=\"{'highlighted': comment._id === highlightedCommentId}\"\n            @longpress=\"showCommentActions(comment)\"\n            v-if=\"comment.status !== 0\"\n            :data-comment-id=\"comment._id\"\n          >\n              <image \n              class=\"comment-avatar\" \n              :src=\"comment.userInfo ? (comment.userInfo.avatar || '/static/images/default-avatar.png') : '/static/images/default-avatar.png'\" \n                mode=\"aspectFill\"\n              @tap=\"gotoUserPage(comment.userId)\"\n            ></image>\n            <view class=\"comment-right\">\n              <view class=\"comment-user\">\n                <text class=\"comment-nickname\">{{comment.userInfo ? (comment.userInfo.nickname || '用户') : '用户'}}</text>\n            </view>\n              <view class=\"reply-info\" v-if=\"comment.replyTo\">\n                <text class=\"reply-text\">回复</text>\n                <text class=\"reply-nickname\">{{comment.replyUserInfo ? (comment.replyUserInfo.nickname || '用户') : '用户'}}</text>\n              </view>\n              <view class=\"comment-content\">\n                <text class=\"comment-text\">{{comment.content}}</text>\n                \n                <!-- 评论图片容器 -->\n                <view v-if=\"comment.image\" class=\"comment-image-container\">\n                  <image \n                    :src=\"comment.image\" \n                    mode=\"widthFix\" \n                class=\"comment-image\"\n                    @tap=\"previewCommentImage(comment.image)\"\n                    @error=\"handleImageError(comment)\"\n                  ></image>\n            </view>\n              </view>\n              <view class=\"comment-footer\">\n                <text class=\"comment-time\">{{formatTime(comment.createTime)}}</text>\n            <view class=\"comment-actions\">\n              <view class=\"action-item\" @tap=\"replyComment(comment)\">\n                    <image class=\"action-icon-small\" src=\"/static/images/icons/pinglun.png\" mode=\"aspectFit\"></image>\n                <text>回复</text>\n                  </view>\n                  <view class=\"action-item\" @tap=\"likeComment(comment)\">\n                    <image \n                      class=\"action-icon-small\" \n                      :src=\"comment.isLiked ? '/static/images/heart-filled.png' : '/static/images/heart.png'\" \n                      :class=\"{\n                        'liked': comment.isLiked, \n                        'like-loading': comment.likeLoading,\n                        'like-animate': comment.animating\n                      }\" \n                      mode=\"aspectFit\"\n                    ></image>\n                    <text :class=\"{'liked': comment.isLiked}\">{{comment.likeCount > 0 ? comment.likeCount : '点赞'}}</text>\n                  </view>\n              </view>\n            </view>\n          </view>\n        </view>\n      </view>\n    </view>\n\n      <!-- 点赞用户列表 -->\n      <view class=\"like-users-list\" v-if=\"activeTab === 'like'\">\n        <view class=\"loading-state\" v-if=\"likeUsersLoading && !likeUsers.length\">\n          <uni-icons type=\"spinner-cycle\" size=\"24\" color=\"#999\"></uni-icons>\n          <text>加载点赞用户中...</text>\n      </view>\n        \n        <view class=\"empty-state\" v-else-if=\"!likeUsers.length\">\n          <text class=\"empty-text\">暂无点赞</text>\n        </view>\n        \n        <view class=\"like-user-item\" v-else v-for=\"(user, index) in likeUsers\" :key=\"index\" @tap=\"gotoUserPage(user._id)\">\n          <image \n            class=\"like-user-avatar\" \n            :src=\"user.avatar || '/static/images/default-avatar.png'\" \n            mode=\"aspectFill\"\n            @error=\"handleUserAvatarError(user)\"\n          ></image>\n          <view class=\"like-user-info\">\n            <text class=\"like-user-nickname\">{{user.nickname || '用户'}}</text>\n            <text class=\"like-user-time\">{{user.likeTimeText || '刚刚'}}</text>\n        </view>\n      </view>\n    </view>\n    </view>\n    </scroll-view>\n\n    <!-- 底部评论栏 -->\n    <view class=\"bottom-bar\">\n      <view class=\"input-box\" @tap=\"showCommentPopup\">说点什么...</view>\n      <view class=\"bottom-actions\">\n        <view class=\"action-btn\" @tap=\"showCommentPopup\">\n          <image src=\"/static/images/icons/aite.png\" class=\"action-btn-icon\"></image>\n          </view>\n        <view class=\"action-btn\" @tap=\"showCommentPopup\">\n          <image src=\"/static/images/icons/tupian.png\" class=\"action-btn-icon\"></image>\n        </view>\n            </view>\n          </view>\n\n    <!-- 评论弹出框 -->\n    <comment-popup \n      ref=\"commentPopup\"\n      :detail=\"detail\"\n      :replyInfo=\"replyInfo\"\n      :postId=\"detail._id\"\n      @submit=\"handleCommentSubmit\"\n      @cancel=\"replyInfo = null\"></comment-popup>\n\n    <!-- 加载中 -->\n    <uni-load-more :status=\"loadingStatus\"></uni-load-more>\n\n    <!-- 用户搜索下拉框 -->\n    <view class=\"user-search-box\" v-if=\"showUserSearchBox\">\n      <view class=\"search-input-wrap\">\n        <input \n          type=\"text\"\n          v-model=\"userSearchKeyword\"\n          placeholder=\"搜索用户\"\n          focus\n          @input=\"handleUserSearchInput\"\n        />\n          </view>\n      <view class=\"user-search-loading\" v-if=\"userSearchLoading\">\n        <uni-icons type=\"spinner-cycle\" size=\"18\" color=\"#999\"></uni-icons>\n        <text>搜索中...</text>\n        </view>\n      <scroll-view class=\"user-search-results\" scroll-y>\n        <view \n          class=\"user-search-item\" \n          v-for=\"user in userSearchResults\" \n          :key=\"user._id\"\n          @tap=\"selectUserToMention(user)\"\n        >\n          <image class=\"user-avatar\" :src=\"user.avatar || '/static/images/default-avatar.png'\" mode=\"aspectFill\"/>\n          <view class=\"user-info\">\n            <text class=\"user-nickname\">{{user.nickname || '用户'}}</text>\n            <text class=\"user-signature\">{{user.signature || '这个人很懒，什么都没写'}}</text>\n      </view>\n    </view>\n        <view class=\"no-results\" v-if=\"!userSearchLoading && userSearchResults.length === 0\">\n          <text>未找到匹配的用户</text>\n        </view>\n      </scroll-view>\n    </view>\n\n    <!-- 仅在开发环境显示的调试按钮，添加在页面底部 -->\n    <button v-if=\"__DEV__\" class=\"debug-btn\" @tap=\"debugFollowStatus\">检查关注状态</button>\n  </view>\n</template>\n\n<script>\nimport CommentPopup from '@/components/comment-popup/comment-popup.vue'\n\nexport default {\n  components: {\n    CommentPopup\n  },\n  data() {\n    return {\n      userId: uni.getStorageSync('userId') || '',\n      postId: '',\n      detail: {\n        _id: '',\n        content: '',\n        images: [],\n        commentCount: 0,\n        likeCount: 0,\n        shareCount: 0,\n        isLiked: false,\n        userInfo: {\n          _id: '',\n          nickname: '',\n          avatar: ''\n        }\n      },\n      comments: [],\n      replyInfo: null,\n      page: 1,\n      pageSize: 10,\n      loadingStatus: 'more',\n      sortType: 'time', // 'time' 或 'hot'\n      activeTab: 'comment',\n      likeUsers: [],\n      commentsPage: 0,\n      commentsPageSize: 10,\n      commentsLoading: false,\n      commentsFinished: false,\n      isFollowing: false,\n      followLoading: false,\n      currentUserId: '',\n      targetCommentId: '',\n      highlightedCommentId: '',\n      pendingHighlightId: '',\n      toComment: false,\n      showUserSearchBox: false,\n      userSearchKeyword: '',\n      userSearchResults: [],\n      userSearchLoading: false,\n      mentionedUsers: [], // 存储评论中@的用户\n      likeUsersLoading: false,\n      isDetailLoading: false,\n      hasInitialized: false,\n      commentsLoaded: false,\n      likeLoading: false, // 添加点赞加载状态\n      loadingComments: false, // 添加评论加载状态\n      hasMoreComments: true, // 添加更多评论标志\n      postData: {},\n      onShowLoadingLock: false,\n      __DEV__: process.env.NODE_ENV === 'development'\n    }\n  },\n  \n  onLoad(options) {\n    console.log('详情页面加载，参数:', options);\n    \n    this.userId = uni.getStorageSync('userId') || '';\n    this.postId = options.id;\n    this.detail._id = options.id;\n    \n    // 默认加载评论标签页\n    this.activeTab = 'comment';\n    \n    // 立即加载详情和评论\n    this.loadDetailAndComments().then(() => {\n      // 加载完详情后立即检查关注状态\n      if (this.detail?.userInfo?._id && this.userId) {\n        console.log('帖子详情加载完成，检查关注状态');\n        this.checkFollowStatus();\n      }\n    });\n    \n    // 在加载详情之后，同步本地存储的点赞状态\n    this.syncLikeStateFromStorage();\n  },\n  \n  onShow() {\n    console.log('详情页显示');\n    \n    // 如果已经有帖子ID和用户信息，但还没有触发关注状态检查\n    if (this.detail?.userInfo?._id && this.userId) {\n      console.log('详情页显示，执行关注状态检查');\n      \n      // 为避免每次显示页面都请求，先检查本地存储\n      const followedUsers = uni.getStorageSync('followedUsers') || {};\n      const storedFollowState = followedUsers[this.detail.userInfo._id];\n      \n      // 如果本地存储的关注状态较新（10分钟内），直接使用\n      if (storedFollowState && Date.now() - storedFollowState.timestamp < 10 * 60 * 1000) {\n        console.log('使用本地存储的关注状态:', storedFollowState.isFollowing);\n        this.isFollowing = storedFollowState.isFollowing;\n      } else {\n        // 否则请求服务器获取最新状态\n        this.checkFollowStatus();\n      }\n    }\n    \n    // 刷新点赞状态和点赞用户列表\n    if (this.detail._id) {\n      this.refreshLikeState();\n      \n      // 如果当前是点赞标签页，重新加载点赞用户列表\n      if (this.activeTab === 'like') {\n        this.loadLikeUsers(this.detail._id);\n      }\n    }\n  },\n  \n  methods: {\n    // 获取帖子详情和评论\n    async loadDetailAndComments() {\n      try {\n        // 首先加载帖子详情\n        await this.loadDetail();\n        \n        // 然后加载评论\n        await this.loadComments(true);\n        \n        // 如果需要自动滚动到评论区\n        if (this.toComment) {\n        setTimeout(() => {\n            this.scrollToComments();\n        }, 500);\n      }\n      } catch (err) {\n        console.error('加载详情和评论失败:', err);\n      }\n    },\n    \n    // 加载帖子详情\n    async loadDetail() {\n      if (!this.postId) {\n        return;\n      }\n      \n      this.isDetailLoading = true;\n      \n      try {\n        const userId = uni.getStorageSync('userId');\n        console.log('加载帖子详情，ID:', this.postId);\n        \n        const res = await uniCloud.callFunction({\n          name: 'getPostDetail',\n          data: {\n            postId: this.postId,\n            userId,\n            timestamp: Date.now() // 添加时间戳防止缓存\n          }\n        });\n        \n        if (res.result.code === 0 && res.result.data) {\n          this.detail = res.result.data;\n          \n          // 确保likeCount为数字且不为负数\n          this.detail.likeCount = Math.max(0, parseInt(this.detail.likeCount) || 0);\n          \n          // 确保isLiked是布尔值\n          this.detail.isLiked = !!this.detail.isLiked;\n          \n          console.log('帖子详情数据:', this.detail);\n          \n          // 设置标题\n          uni.setNavigationBarTitle({\n            title: this.detail.userInfo ? (this.detail.userInfo.nickname + '的帖子') : '帖子详情'\n          });\n          \n          // 加载点赞用户列表，但不立即更新帖子的点赞数\n          if (this.activeTab === 'like') {\n            this.loadLikeUsersWithoutUpdatingCount(this.postId);\n          }\n          \n          // 在loadDetail方法的成功回调中添加\n          console.log('帖子信息:', {\n            '当前用户ID': this.userId,\n            '帖子作者ID': res.result.data.userInfo._id,\n            '是否是自己的帖子': this.userId === res.result.data.userInfo._id\n          });\n        } else {\n          throw new Error(res.result.msg || '获取帖子详情失败');\n        }\n      } catch (error) {\n        console.error('加载帖子详情失败:', error);\n        uni.showToast({\n          title: error.message || '加载失败',\n          icon: 'none'\n        });\n      } finally {\n        this.isDetailLoading = false;\n      }\n    },\n    \n    // 新增方法：加载点赞用户列表但不更新点赞数\n    async loadLikeUsersWithoutUpdatingCount(postId) {\n      if (!postId) {\n        console.error('加载点赞用户失败：缺少帖子ID');\n        return;\n      }\n      \n      // 防止重复加载\n      if (this.likeUsersLoading) {\n        console.log('点赞用户加载中，跳过重复请求');\n        return;\n      }\n      \n      this.likeUsersLoading = true;\n      console.log('开始静默加载点赞用户列表');\n      \n      // 最多重试2次\n      let retryCount = 0;\n      const maxRetries = 2;\n      \n      const loadLikeUsersWithRetry = async () => {\n        try {\n          const res = await uniCloud.callFunction({\n            name: 'getLikeUsers',\n            data: {\n              postId: postId,\n              type: 'post',\n              updateCount: false, // 增加一个标志位告诉云函数不要更新点赞数\n              timestamp: Date.now()\n            },\n            timeout: 8000 // 8秒超时，比主加载方法短一些\n          });\n          \n          if (res.result && res.result.code === 0) {\n            const likeUsers = Array.isArray(res.result.data) ? res.result.data : [];\n            this.likeUsers = likeUsers;\n            \n            // 只记录数量差异，不强制更新点赞计数\n            if (this.likeUsers.length !== this.detail.likeCount) {\n              console.log('点赞数量存在差异: UI显示', this.detail.likeCount, '实际用户数', this.likeUsers.length);\n            }\n            \n            // 缓存点赞用户数据，但不影响显示的点赞计数\n            try {\n              uni.setStorageSync(`likeUsers_${postId}`, {\n                data: this.likeUsers,\n                timestamp: Date.now(),\n                count: this.likeUsers.length,\n                displayCount: this.detail.likeCount // 保存显示的计数，与实际数量分开\n              });\n            } catch (storageError) {\n              console.error('缓存点赞用户数据失败:', storageError);\n            }\n          } else {\n            throw new Error((res.result && res.result.msg) || '获取点赞用户失败');\n          }\n        } catch (error) {\n          console.error('静默获取点赞用户出错:', error);\n          \n          // 检查是否还有重试机会\n          if (retryCount < maxRetries - 1) {\n            retryCount++;\n            // 延迟重试，避免过快请求\n            await new Promise(resolve => setTimeout(resolve, 800 * retryCount));\n            return await loadLikeUsersWithRetry();\n          }\n          \n          // 重试耗尽后，尝试从缓存加载，但不显示错误提示\n          const cachedLikeUsers = uni.getStorageSync(`likeUsers_${postId}`);\n          if (cachedLikeUsers && cachedLikeUsers.data && \n              Array.isArray(cachedLikeUsers.data) &&\n              Date.now() - cachedLikeUsers.timestamp < 10 * 60 * 1000) {\n            console.log('使用缓存的点赞用户数据');\n            this.likeUsers = cachedLikeUsers.data;\n          } else {\n            this.likeUsers = [];\n          }\n        } finally {\n          this.likeUsersLoading = false;\n        }\n      };\n      \n      // 开始加载，包含重试逻辑\n      await loadLikeUsersWithRetry();\n    },\n    \n    // 加载评论列表\n    async loadComments(refresh = false) {\n      // 避免重复加载\n      if (this.loadingComments) return;\n      \n      if (refresh) {\n        this.commentsPage = 1;\n        this.comments = [];\n        this.hasMoreComments = true;\n      } else if (!this.hasMoreComments) {\n        return;\n      }\n      \n      this.loadingComments = true;\n      this.commentsLoading = true;\n\n      try {\n        // 获取本地存储的评论点赞状态\n        const likedComments = uni.getStorageSync('likedComments') || {};\n        \n        const res = await uniCloud.callFunction({\n          name: 'getComments',\n          data: {\n            postId: this.postId,\n            page: this.commentsPage,\n            pageSize: 10,\n            userId: this.userId\n          }\n        });\n        \n        if (res.result.code === 0) {\n          const data = res.result.data;\n          const comments = data.list || [];\n          \n          // 获取用户当前的点赞状态\n          if (this.userId && comments.length > 0) {\n            try {\n              // 获取当前用户对这些评论的点赞状态\n              const commentIds = comments.map(comment => comment._id);\n              const likeResult = await uniCloud.callFunction({\n                name: 'getCommentLikes',\n                data: {\n                  userId: this.userId,\n                  commentIds: commentIds\n                }\n              });\n              \n              if (likeResult.result && likeResult.result.code === 0) {\n                const likedCommentIds = likeResult.result.data || [];\n                \n                // 更新评论的点赞状态\n                comments.forEach(comment => {\n                  // 优先使用服务器返回的点赞状态\n                  comment.isLiked = likedCommentIds.includes(comment._id);\n                  \n                  // 如果服务器返回未点赞，但本地存储有较新的点赞记录，则使用本地记录\n                  const localLikeInfo = likedComments[comment._id];\n                  if (!comment.isLiked && localLikeInfo && localLikeInfo.isLiked) {\n                    // 确认本地记录是否在有效期内 (10分钟内)\n                    if (Date.now() - localLikeInfo.timestamp < 10 * 60 * 1000) {\n                      console.log(`使用本地点赞记录: 评论ID=${comment._id}`);\n                      comment.isLiked = true;\n                      \n                      // 异步更新服务器点赞状态，确保服务器与客户端一致\n                      this.syncLikeStatus(comment._id, true);\n                    }\n                  }\n                });\n              }\n            } catch (likeError) {\n              console.error('获取评论点赞状态失败:', likeError);\n              \n              // 如果服务器查询失败，仅使用本地存储的点赞状态\n              comments.forEach(comment => {\n                const localLikeInfo = likedComments[comment._id];\n                if (localLikeInfo && localLikeInfo.isLiked) {\n                  // 确认本地记录是否在有效期内 (10分钟内)\n                  if (Date.now() - localLikeInfo.timestamp < 10 * 60 * 1000) {\n                    comment.isLiked = true;\n                  }\n                }\n              });\n            }\n          }\n          \n          // 确保每条评论有必要的属性\n          comments.forEach(comment => {\n            comment.likeCount = Math.max(0, comment.likeCount || 0);\n            comment.isLiked = !!comment.isLiked;\n          });\n          \n          if (refresh || this.commentsPage === 1) {\n            this.comments = comments;\n          } else {\n            // 合并评论，避免重复\n            this.comments = [...this.comments, ...comments];\n          }\n          \n          // 按排序方式排序\n          this.sortComments();\n          \n          // 更新是否有更多评论\n          this.hasMoreComments = data.hasMore;\n          if (data.hasMore) {\n            this.commentsPage++;\n          }\n        } else {\n          throw new Error(res.result.msg || '加载评论失败');\n        }\n      } catch (error) {\n        console.error('加载评论失败:', error);\n        uni.showToast({\n          title: '加载评论失败',\n          icon: 'none'\n        });\n      } finally {\n        this.loadingComments = false;\n        this.commentsLoading = false;\n      }\n    },\n    \n    // 处理评论提交\n    async handleCommentSubmit(data) {\n      console.log('开始提交评论，完整数据:', JSON.stringify(data));\n      \n      if (!data || (!data.content && !data.image)) {\n        uni.showToast({\n          title: '评论内容不能为空',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      try {\n        uni.showLoading({ title: '提交中...' });\n        \n        const content = data.content ? data.content.trim() : '';\n        const postId = this.postId || this.detail._id;\n        const userId = uni.getStorageSync('userId');\n        \n        // 验证基础参数\n        if (!userId) {\n          uni.showToast({ title: '请先登录', icon: 'none' });\n          return;\n        }\n        \n        if (!postId) {\n          uni.showToast({ title: '无效的帖子ID', icon: 'none' });\n          return;\n        }\n        \n        console.log('提交评论参数检查通过');\n        \n        // 提取@用户名\n        const mentionRegex = /@([^\\s@]+)/g;\n        const matches = content.match(mentionRegex) || [];\n        const mentions = matches.map(match => match.substring(1));\n        \n        console.log('检测到@用户:', mentions);\n        \n        // 获取被@用户的ID\n        let mentionedUserIds = [];\n        if (mentions.length > 0) {\n          try {\n            const userResult = await uniCloud.callFunction({\n              name: 'getUsersByNickname',\n              data: { nicknames: mentions }\n            });\n            \n            console.log('获取@用户ID结果:', userResult.result);\n            \n            if (userResult.result.code === 0 && userResult.result.data) {\n              mentionedUserIds = userResult.result.data.map(user => user._id);\n            }\n          } catch (e) {\n            console.error('@用户ID获取失败:', e);\n          }\n        }\n        \n        // 构建评论数据\n        const commentData = {\n          postId,\n          userId,\n          content,\n          parentId: data.parentId || null,\n          replyTo: data.replyTo || (this.replyInfo ? this.replyInfo.userId : null),\n          mentionedUserIds,\n          status: 1,\n          imageUrl: data.image || '' // 添加图片URL\n        };\n        \n        // 提交评论\n        const result = await uniCloud.callFunction({\n          name: 'addComment',\n          data: commentData\n        });\n        \n        console.log('评论提交结果:', result.result);\n        \n        if (result.result.code === 0) {\n        uni.showToast({\n            title: '评论成功',\n            icon: 'success'\n          });\n          \n          // 重置评论页码并重新加载评论（确保按照新的排序获取最新评论）\n          this.commentsPage = 1;\n          await this.loadComments(true);\n          \n          // 滚动到评论区\n          this.$nextTick(() => {\n            this.scrollToComments();\n          });\n          \n          // 清空评论框并关闭弹窗\n          if (this.$refs.commentPopup) {\n            if (typeof this.$refs.commentPopup.clear === 'function') {\n              this.$refs.commentPopup.clear();\n            }\n      this.$refs.commentPopup.close();\n          }\n          \n          // 重置回复信息\n          this.replyInfo = null;\n        } else {\n          throw new Error(result.result.msg || '评论失败');\n        }\n      } catch (error) {\n        console.error('评论提交失败:', error);\n        uni.showToast({\n          title: error.message || '评论提交失败',\n          icon: 'none'\n        });\n      } finally {\n        uni.hideLoading();\n      }\n    },\n    \n    // 回复评论\n    replyComment(comment) {\n      if (!comment || !comment.userInfo) {\n        return;\n      }\n      \n      // 设置回复信息\n      this.replyInfo = {\n        ...comment,\n        autoAt: true, // 标记为需要自动@\n        atNickname: comment.userInfo.nickname || '用户' // 存储要@的用户昵称\n      };\n      \n      this.showCommentPopup();\n    },\n    \n    // 显示评论弹窗\n    showCommentPopup() {\n      if (this.$refs.commentPopup) {\n        this.$refs.commentPopup.open();\n        \n        // 如果是回复并且需要自动@，在评论框中插入@用户\n        if (this.replyInfo && this.replyInfo.autoAt && this.replyInfo.atNickname) {\n          // 延迟一点点执行，确保弹窗已经完全打开\n          setTimeout(() => {\n            this.$refs.commentPopup.setContent(`@${this.replyInfo.atNickname} `);\n          }, 100);\n        }\n      } else {\n        console.error('commentPopup组件引用不存在');\n      }\n    },\n    \n    // 使用新的云函数检查关注状态\n    async checkFollowStatus() {\n      try {\n        const userId = uni.getStorageSync('userId');\n        if (!userId) return;\n        \n        // 获取作者ID\n        const targetUserId = this.detail?.userInfo?._id;\n        if (!targetUserId) {\n          console.log('无需检查关注状态：无目标用户');\n          return;\n        }\n        \n        // 如果是自己的帖子，直接返回\n        if (userId === targetUserId) {\n          console.log('无需检查关注状态：自己的帖子');\n          this.isFollowing = false; // 重置关注状态，避免可能的错误状态\n          return;\n        }\n        \n        console.log('检查关注状态，当前用户:', userId, '目标用户:', targetUserId);\n        \n        // 防止重复请求\n        if (this.followLoading) return;\n        this.followLoading = true;\n        \n        // 调用云函数 - 添加时间戳防止缓存\n        const res = await uniCloud.callFunction({\n          name: 'checkFollow',\n          data: {\n            userId,\n            targetUserId,\n            timestamp: Date.now() // 添加时间戳避免缓存\n          }\n        });\n        \n        console.log('获取关注状态结果:', res.result);\n        \n        if (res.result.code === 0) {\n          // 设置状态前记录原状态，用于判断是否需要更新UI\n          const oldFollowState = this.isFollowing;\n          const newFollowState = res.result.data.isFollowing;\n          \n          // 更新关注状态\n          this.isFollowing = newFollowState;\n          \n          // 记录结果到本地存储\n          const followedUsers = uni.getStorageSync('followedUsers') || {};\n          followedUsers[targetUserId] = {\n            isFollowing: newFollowState,\n            timestamp: Date.now()\n          };\n          uni.setStorageSync('followedUsers', followedUsers);\n          \n          console.log('关注状态检查完成，原状态:', oldFollowState, '新状态:', this.isFollowing);\n          \n          // 如果关注状态变化，触发UI更新\n          if (oldFollowState !== newFollowState) {\n            this.$forceUpdate();\n          }\n        } else {\n          console.error('获取关注状态失败:', res.result.msg);\n        }\n      } catch (error) {\n        console.error('检查关注状态异常:', error);\n      } finally {\n        this.followLoading = false;\n      }\n    },\n    \n    // 处理关注/取关操作\n    async toggleFollow() {\n      try {\n        const userId = uni.getStorageSync('userId');\n        if (!userId) {\n          uni.showToast({\n            title: '请先登录',\n            icon: 'none'\n          });\n          return;\n        }\n\n        const targetUserId = this.detail.userInfo._id;\n        if (!targetUserId || targetUserId === userId) return;\n        \n        // 防止重复点击\n        if (this.followLoading) return;\n        this.followLoading = true;\n        \n        // 根据当前状态决定是否需要确认\n        if (this.isFollowing) {\n          // 已关注状态，弹出确认对话框\n          uni.showModal({\n            title: '取消关注',\n            content: '确定取消关注该用户吗？',\n            success: async (res) => {\n              if (res.confirm) {\n                await this.toggleFollowAction(userId, targetUserId);\n              }\n              this.followLoading = false;\n            },\n            fail: () => {\n              this.followLoading = false;\n            }\n          });\n        } else {\n          // 未关注状态，直接执行\n          await this.toggleFollowAction(userId, targetUserId);\n          this.followLoading = false;\n        }\n      } catch (error) {\n        console.error('关注操作失败:', error);\n        uni.showToast({\n          title: error.message || '操作失败',\n          icon: 'none'\n        });\n        this.followLoading = false;\n      }\n    },\n    \n    // 执行关注/取关操作\n    async toggleFollowAction(userId, targetUserId) {\n      uni.showLoading({ title: '处理中...' });\n      \n      try {\n        // 记录操作前状态\n        const previousFollowState = this.isFollowing;\n        \n        // 更新UI状态，提供立即反馈\n        this.isFollowing = !previousFollowState;\n        \n        // 尝试调用云函数执行关注/取关操作\n        const result = await uniCloud.callFunction({\n          name: 'toggleFollow',\n          data: {\n            userId,\n            targetUserId,\n            timestamp: Date.now() // 添加时间戳避免缓存\n          }\n        });\n        \n        console.log('关注/取关操作结果:', result.result);\n        \n        // 处理成功情况\n        if (result.result && result.result.code === 0) {\n          // 使用服务器返回的实际状态更新UI\n          if (result.result.data && typeof result.result.data.isFollowing === 'boolean') {\n            this.isFollowing = result.result.data.isFollowing;\n          }\n          \n          // 更新本地存储\n          const followedUsers = uni.getStorageSync('followedUsers') || {};\n          followedUsers[targetUserId] = {\n            isFollowing: this.isFollowing,\n            timestamp: Date.now()\n          };\n          uni.setStorageSync('followedUsers', followedUsers);\n          \n          // 更新用户关注计数\n          try {\n            const userInfo = uni.getStorageSync('userInfo') || {};\n            if (userInfo.followCount === undefined) {\n              userInfo.followCount = 0;\n            }\n            \n            const diff = this.isFollowing ? 1 : -1;\n            userInfo.followCount = Math.max(0, (parseInt(userInfo.followCount) || 0) + diff);\n            userInfo.followingCount = userInfo.followCount;\n            \n            uni.setStorageSync('userInfo', userInfo);\n            uni.$emit('userInfoUpdated', userInfo);\n            \n            console.log('更新后的关注计数:', userInfo.followCount);\n          } catch (countError) {\n            console.error('更新关注计数失败:', countError);\n          }\n          \n          uni.showToast({\n            title: this.isFollowing ? '已关注' : '已取消关注',\n            icon: 'success'\n          });\n        } else {\n          // 如果API失败，恢复到原来的状态\n          this.isFollowing = previousFollowState;\n          console.error('关注操作API返回错误:', result.result?.msg);\n          throw new Error(result.result?.msg || '操作失败');\n        }\n      } catch (error) {\n        console.error('关注/取关操作失败:', error);\n        uni.showToast({\n          title: error.message || '操作失败',\n          icon: 'none'\n        });\n      } finally {\n        uni.hideLoading();\n      }\n    },\n    \n    // 显示评论操作菜单\n    showCommentActions(comment) {\n      // 检查是否为评论作者或帖子作者\n      const isCommentAuthor = comment.userId === this.userId;\n      const isPostAuthor = this.detail.userId === this.userId;\n      \n      if (isCommentAuthor || isPostAuthor) {\n        uni.showActionSheet({\n          itemList: ['删除评论'],\n          success: res => {\n            if (res.tapIndex === 0) {\n              this.deleteComment(comment._id);\n            }\n          }\n        });\n      } else {\n        // 其他用户只能举报\n        uni.showActionSheet({\n          itemList: ['举报'],\n          success: res => {\n            if (res.tapIndex === 0) {\n              // 处理举报逻辑\n            }\n          }\n        });\n      }\n    },\n    \n    // 删除评论\n    async deleteComment(commentId) {\n      try {\n        // 确认是否删除\n        const confirmRes = await new Promise((resolve) => {\n          uni.showModal({\n            title: '确认删除',\n            content: '确定要删除这条评论吗？',\n            success: (res) => {\n              resolve(res);\n            }\n          });\n        });\n        \n        if (!confirmRes.confirm) return;\n        \n        uni.showLoading({ title: '删除中...' });\n        \n        // 获取当前用户ID\n        const userId = uni.getStorageSync('userId');\n        if (!userId) {\n          throw new Error('用户未登录');\n        }\n        \n        // 调用云函数删除评论，添加所有必需参数\n        const res = await uniCloud.callFunction({\n          name: 'deleteComment',\n          data: {\n            commentId,\n            userId,\n            postId: this.postId // 确保this.postId存在且正确\n          }\n        });\n        \n        console.log('删除评论结果:', res.result);\n\n        if (res.result.code === 0) {\n          // 删除成功，更新评论列表\n          this.comments = this.comments.filter(item => item._id !== commentId);\n          \n          // 更新评论计数\n          if (this.detail.commentCount > 0) {\n            this.detail.commentCount -= 1;\n          }\n          \n          uni.showToast({\n            title: '删除成功',\n            icon: 'success'\n          });\n        } else {\n          throw new Error(res.result.msg || '删除失败');\n        }\n      } catch (error) {\n        console.error('删除评论失败:', error);\n        uni.showToast({\n          title: error.message || '删除失败',\n          icon: 'none'\n        });\n      } finally {\n        uni.hideLoading();\n      }\n    },\n    \n    // 点赞帖子\n    async handleLike() {\n      if (!this.userId) {\n        uni.showToast({\n          title: '请先登录',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      // 防止重复点击\n      if (this.likeLoading) return;\n      this.likeLoading = true;\n      \n      try {\n        // 记录原始状态\n        const previousLikeState = this.detail.isLiked;\n        const previousCount = this.detail.likeCount || 0;\n        \n        // 立即更新UI\n        this.detail.isLiked = !previousLikeState;\n        this.detail.likeCount = Math.max(0, previousCount + (this.detail.isLiked ? 1 : -1));\n        \n        // 同步更新本地存储\n        const likedPosts = uni.getStorageSync('likedPosts') || {};\n        if (this.detail.isLiked) {\n          likedPosts[this.detail._id] = {\n            isLiked: true,\n            timestamp: Date.now()\n          };\n        } else {\n          if (likedPosts[this.detail._id]) {\n            likedPosts[this.detail._id].isLiked = false;\n          }\n        }\n        uni.setStorageSync('likedPosts', likedPosts);\n        \n        // 调用API\n        const res = await uniCloud.callFunction({\n          name: 'toggleLike',\n          data: {\n            userId: this.userId,\n            targetId: this.detail._id,\n            type: 'post',\n            timestamp: Date.now() // 添加时间戳避免缓存\n          }\n        });\n        \n        // 处理API响应\n        if (res.result && res.result.code === 0) {\n          // 成功，根据服务器返回更新实际点赞数\n          if (res.result.data && typeof res.result.data.likeCount === 'number') {\n            this.detail.likeCount = res.result.data.likeCount;\n            console.log('服务器返回的点赞数:', this.detail.likeCount);\n            \n            // 如果当前是点赞列表页，同时更新列表\n            if (this.activeTab === 'like') {\n              this.loadLikeUsersWithoutUpdatingCount(this.detail._id);\n            }\n          }\n        } else {\n          // 失败，恢复原始状态\n          this.detail.isLiked = previousLikeState;\n          this.detail.likeCount = previousCount;\n          \n          // 恢复本地存储\n          if (previousLikeState) {\n            likedPosts[this.detail._id] = { isLiked: true, timestamp: Date.now() };\n          } else {\n            if (likedPosts[this.detail._id]) {\n              likedPosts[this.detail._id].isLiked = false;\n            }\n          }\n          uni.setStorageSync('likedPosts', likedPosts);\n          \n          throw new Error(res.result?.msg || '操作失败');\n        }\n      } catch (error) {\n        console.error('点赞操作失败:', error);\n        uni.showToast({\n          title: error.message || '操作失败',\n          icon: 'none'\n        });\n      } finally {\n        // 延迟一下再设置状态，避免频繁点击\n        setTimeout(() => {\n          this.likeLoading = false;\n        }, 300);\n      }\n    },\n    \n    // 点赞评论\n    async likeComment(comment) {\n      if (!this.userId) {\n        uni.showToast({\n          title: '请先登录',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      // 防止重复操作\n      if (comment.likeLoading) return;\n      \n      // 设置临时状态\n      this.$set(comment, 'likeLoading', true);\n      const previousLiked = comment.isLiked;\n      const previousCount = comment.likeCount || 0;\n      \n      try {\n        // 先更新UI状态，提供即时反馈\n        this.$set(comment, 'isLiked', !previousLiked);\n        this.$set(comment, 'likeCount', Math.max(0, previousCount + (!previousLiked ? 1 : -1)));\n        \n        // 添加本地存储，记住点赞状态\n        const likedComments = uni.getStorageSync('likedComments') || {};\n        const newLikeState = !previousLiked;\n        \n        // 更新本地存储\n        likedComments[comment._id] = {\n          isLiked: newLikeState,\n          timestamp: Date.now()\n        };\n        uni.setStorageSync('likedComments', likedComments);\n        \n        // 添加点赞动画效果\n        this.animateLike(comment._id);\n        \n        // 调用后端API\n        const res = await uniCloud.callFunction({\n          name: 'toggleLike',\n          data: {\n            userId: this.userId,\n            targetId: comment._id,\n            type: 'comment',\n            isLiked: newLikeState, // 明确提供当前点赞状态\n            timestamp: Date.now() // 添加时间戳避免缓存\n          }\n        });\n        \n        if (res.result.code !== 0) {\n          // 恢复原始状态\n          this.$set(comment, 'isLiked', previousLiked);\n          this.$set(comment, 'likeCount', previousCount);\n          \n          // 恢复本地存储\n          likedComments[comment._id] = {\n            isLiked: previousLiked,\n            timestamp: Date.now()\n          };\n          uni.setStorageSync('likedComments', likedComments);\n          \n          throw new Error(res.result.msg || '操作失败');\n        } else if (res.result.data) {\n          // 如果API返回了具体的点赞状态和数量，更新到UI\n          if (typeof res.result.data.isLiked === 'boolean') {\n            this.$set(comment, 'isLiked', res.result.data.isLiked);\n            \n            // 同步服务器返回的状态到本地存储\n            likedComments[comment._id] = {\n              isLiked: res.result.data.isLiked,\n              timestamp: Date.now()\n            };\n            uni.setStorageSync('likedComments', likedComments);\n          }\n          if (typeof res.result.data.likeCount === 'number') {\n            this.$set(comment, 'likeCount', res.result.data.likeCount);\n          }\n        }\n        \n      } catch (error) {\n        console.error('评论点赞失败:', error);\n        uni.showToast({\n          title: error.message || '操作失败',\n          icon: 'none'\n        });\n      } finally {\n        // 延迟取消加载状态，避免UI闪烁\n        setTimeout(() => {\n          this.$set(comment, 'likeLoading', false);\n        }, 300);\n      }\n    },\n    \n    // 点赞动画效果\n    animateLike(commentId) {\n      // 使用uni-app的查询API代替DOM查询\n      const query = uni.createSelectorQuery().in(this);\n      query.select(`.comment-item[data-comment-id=\"${commentId}\"] .action-icon-small.liked`)\n        .fields({ node: true, size: true }, (res) => {\n          if (!res) return;\n          // 由于无法直接操作节点，我们使用类名切换方式\n          // 将对应评论项临时添加动画标记\n          const comment = this.comments.find(c => c._id === commentId);\n          if (comment) {\n            this.$set(comment, 'animating', true);\n            setTimeout(() => {\n              this.$set(comment, 'animating', false);\n            }, 500);\n          }\n        }).exec();\n    },\n    \n    // 切换评论排序方式\n    setSortType(type) {\n      if (this.sortType === type) return;\n      \n      this.sortType = type;\n      this.sortComments();\n      \n      uni.showToast({\n        title: type === 'time' ? '按时间排序' : '按热度排序',\n        icon: 'none',\n        duration: 1500\n      });\n    },\n    \n    // 排序评论列表\n    sortComments() {\n      if (!this.comments || this.comments.length <= 1) return;\n      \n      if (this.sortType === 'time') {\n        // 按时间从新到旧排序\n        this.comments.sort((a, b) => {\n          return new Date(b.createTime) - new Date(a.createTime);\n        });\n      } else {\n        // 按热度排序，点赞数相同则按时间排序\n        this.comments.sort((a, b) => {\n          const likeDiff = (b.likeCount || 0) - (a.likeCount || 0);\n          if (likeDiff !== 0) return likeDiff;\n          // 点赞数相同，按时间从新到旧排序\n          return new Date(b.createTime) - new Date(a.createTime);\n        });\n      }\n    },\n    \n    // 预览图片\n    previewImage(index) {\n      uni.previewImage({\n        urls: this.detail.images,\n        current: index\n      });\n    },\n    \n    // 预览评论图片\n    previewCommentImage(imageUrl) {\n      uni.previewImage({\n        urls: [imageUrl],\n        current: imageUrl\n      });\n    },\n    \n    // 跳转到用户主页 - 使用getUserProfile云函数\n    async gotoUserPage(userId) {\n      if (!userId) return;\n      \n      // 显示加载状态\n      uni.showLoading({\n        title: '加载中...',\n        mask: true\n      });\n      \n      try {\n        // 获取用户信息\n        const res = await uniCloud.callFunction({\n          name: 'getUserProfile',\n          data: { \n            userId,\n            forceUpdate: true\n          },\n          timeout: 5000 // 5秒超时\n        });\n        \n        // 隐藏加载状态\n        uni.hideLoading();\n        \n        if (res.result && res.result.code === 0 && res.result.data) {\n          // 跳转到用户页面\n          uni.navigateTo({\n            url: `/pages/mine/mine?id=${userId}`,\n            fail: (err) => {\n              console.error('导航到用户页面失败:', err);\n              // 尝试不同的用户页面路径\n              uni.navigateTo({\n                url: `/pages/user/user?id=${userId}`,\n                fail: (e) => {\n                  // 如果还是失败，显示提示\n                  uni.showToast({\n                    title: '用户页面暂不可用',\n                    icon: 'none'\n                  });\n                }\n              });\n            }\n          });\n        } else {\n          throw new Error((res.result && res.result.msg) || '获取用户信息失败');\n        }\n      } catch (error) {\n        console.error('获取用户信息或跳转失败:', error);\n        uni.hideLoading();\n        \n        uni.showToast({\n          title: error.message || '无法访问用户页面',\n          icon: 'none'\n        });\n      }\n    },\n    \n    // 加载更多评论\n    loadMoreComments() {\n      console.log('触发加载更多评论');\n      \n      // 检查是否已全部加载完毕或者正在加载中\n      if (this.commentsFinished || this.commentsLoading || !this.hasMoreComments) {\n        console.log('跳过加载更多评论:', \n          this.commentsFinished ? '已全部加载' : (this.commentsLoading ? '正在加载中' : '没有更多评论'));\n        return;\n      }\n      \n      console.log('开始加载更多评论，当前页码:', this.commentsPage);\n      // 显式传入 false 表示不是刷新，而是追加\n      this.loadComments(false);\n    },\n    \n    // 格式化时间\n    formatTime(timestamp) {\n      if (!timestamp) return '刚刚';\n      \n      const date = new Date(timestamp);\n      const now = new Date();\n      const diff = Math.floor((now - date) / 1000);\n      \n      if (diff < 60) {\n        return '刚刚';\n      } else if (diff < 3600) {\n        return Math.floor(diff / 60) + '分钟前';\n      } else if (diff < 86400) {\n        return Math.floor(diff / 3600) + '小时前';\n      } else if (diff < 2592000) {\n        return Math.floor(diff / 86400) + '天前';\n      } else {\n      const year = date.getFullYear();\n        const month = (date.getMonth() + 1).toString().padStart(2, '0');\n        const day = date.getDate().toString().padStart(2, '0');\n        return `${year}-${month}-${day}`;\n      }\n    },\n    \n    // 切换评论/点赞选项卡\n    switchTab(tab) {\n      if (this.activeTab === tab) return;\n      this.activeTab = tab;\n      \n      if (tab === 'comment') {\n        if (this.comments.length === 0) {\n          this.loadComments();\n        }\n      } else if (tab === 'like') {\n        if (this.likeUsers.length === 0) {\n          // 使用不更新点赞数的版本\n          this.loadLikeUsersWithoutUpdatingCount(this.detail._id);\n        }\n      }\n    },\n    \n    // 滚动到评论区\n    scrollToComments() {\n      // 可以根据需要实现滚动逻辑\n      // 这里使用简单的选择器查询和scrollTop设置\n      const query = uni.createSelectorQuery().in(this);\n      query.select('.comment-section').boundingClientRect();\n      query.selectViewport().scrollOffset();\n      query.exec(([res, scrollRes]) => {\n        if (res) {\n          uni.pageScrollTo({\n            scrollTop: res.top + scrollRes.scrollTop - 100, // 减去一点偏移量\n            duration: 300\n          });\n        }\n      });\n    },\n    \n    // 加载点赞用户列表\n    async loadLikeUsers(postId) {\n      if (!postId) {\n        console.error('加载点赞用户失败：缺少帖子ID');\n        return;\n      }\n      \n      // 防止重复加载\n      if (this.likeUsersLoading) {\n        console.log('点赞用户加载中，跳过重复请求');\n        return;\n      }\n      \n      this.likeUsersLoading = true;\n      \n      // 最多重试3次\n      let retryCount = 0;\n      const maxRetries = 3;\n      \n      const loadLikeUsersWithRetry = async () => {\n        try {\n          console.log(`开始加载点赞用户列表，帖子ID: ${postId}, 第${retryCount + 1}次尝试`);\n          \n          if (retryCount === 0) {\n        uni.showLoading({\n              title: '加载中...',\n              mask: true\n            });\n          }\n          \n          const res = await uniCloud.callFunction({\n            name: 'getLikeUsers',\n            data: {\n              postId: postId,\n              type: 'post',\n              timestamp: Date.now() // 添加时间戳避免缓存\n            },\n            timeout: 10000 // 10秒超时\n          });\n          \n          console.log('获取点赞用户结果:', JSON.stringify(res.result));\n          \n          if (res.result && res.result.code === 0) {\n            // 确保likeUsers是数组并且检查每个用户信息是否完整\n            let likeUsers = Array.isArray(res.result.data) ? res.result.data : [];\n            \n            // 检查是否为备用数据\n            if (res.result.isBackupData) {\n              console.log('收到备用数据，用户信息可能不完整');\n            }\n            \n            // 检查并日志记录有问题的用户数据\n            let incompleteUserCount = 0;\n            likeUsers.forEach((user, index) => {\n              if (!user.nickname || user.nickname === '用户' || !user.avatar) {\n                incompleteUserCount++;\n                console.warn(`点赞用户 ${index + 1} 数据不完整:`, JSON.stringify(user));\n              }\n            });\n            \n            // 如果发现过多不完整的用户且未到达最大重试次数，则重试\n            if (incompleteUserCount > likeUsers.length / 2 && retryCount < maxRetries - 1) {\n              console.log(`发现${incompleteUserCount}个不完整用户数据，准备重试`);\n              retryCount++;\n              \n              // 延迟重试，避免过快请求\n              await new Promise(resolve => setTimeout(resolve, 1000));\n              return await loadLikeUsersWithRetry();\n            }\n            \n            this.likeUsers = likeUsers;\n            console.log('点赞用户列表最终长度:', this.likeUsers.length);\n            \n            // 同步点赞计数 (从服务器返回的实际数量)\n            if (typeof res.result.likeCount === 'number') {\n              console.log('从服务器同步点赞数量:', res.result.likeCount);\n              this.detail.likeCount = res.result.likeCount;\n            } \n            // 如果没有明确返回点赞计数，则使用列表长度\n            else if (this.likeUsers.length !== this.detail.likeCount) {\n              console.log('使用列表长度同步点赞数量: 从', this.detail.likeCount, '到', this.likeUsers.length);\n              this.detail.likeCount = this.likeUsers.length;\n            }\n            \n            // 缓存点赞用户数据到本地，有效期10分钟\n            try {\n              uni.setStorageSync(`likeUsers_${postId}`, {\n                data: this.likeUsers,\n                timestamp: Date.now(),\n                count: this.likeUsers.length\n              });\n            } catch (storageError) {\n              console.error('缓存点赞用户数据失败:', storageError);\n            }\n          } else {\n            throw new Error((res.result && res.result.msg) || '获取点赞用户失败');\n          }\n        } catch (error) {\n          console.error('获取点赞用户出错:', error);\n          \n          // 检查是否还有重试机会\n          if (retryCount < maxRetries - 1) {\n            console.log(`第${retryCount + 1}次加载失败，准备重试`);\n            retryCount++;\n            \n            // 延迟重试，避免过快请求\n            await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // 逐次增加延迟\n            return await loadLikeUsersWithRetry();\n          }\n          \n          // 重试耗尽后，尝试从缓存加载\n          console.log('重试次数用尽，尝试从缓存加载');\n          const cachedLikeUsers = uni.getStorageSync(`likeUsers_${postId}`);\n          \n          if (cachedLikeUsers && cachedLikeUsers.data && \n              Array.isArray(cachedLikeUsers.data) &&\n              Date.now() - cachedLikeUsers.timestamp < 10 * 60 * 1000) { // 10分钟内的缓存\n            console.log('使用缓存的点赞用户数据, 缓存时间:', new Date(cachedLikeUsers.timestamp).toLocaleString());\n            this.likeUsers = cachedLikeUsers.data;\n            \n            // 如果缓存的数量与当前显示不同，更新显示\n            if (cachedLikeUsers.count !== this.detail.likeCount) {\n              console.log('从缓存更新点赞数:', cachedLikeUsers.count);\n              this.detail.likeCount = cachedLikeUsers.count;\n            }\n          } else {\n            // 缓存不可用或过期，显示空列表\n            this.likeUsers = [];\n            uni.showToast({\n              title: '获取点赞用户失败',\n              icon: 'none'\n            });\n          }\n        } finally {\n        uni.hideLoading();\n          this.likeUsersLoading = false;\n        }\n      };\n      \n      // 开始加载，包含重试逻辑\n      await loadLikeUsersWithRetry();\n    },\n    \n    // 添加新方法：同步点赞数量到服务器\n    async syncLikeCount(postId, actualCount) {\n      try {\n        await uniCloud.callFunction({\n          name: 'syncLikeCount',\n          data: {\n            postId,\n            actualCount,\n            timestamp: Date.now()\n          }\n        });\n        console.log('点赞数量同步成功');\n      } catch (error) {\n        console.error('同步点赞数量失败:', error);\n      }\n    },\n    \n    // 滚动到特定评论\n    scrollToComment(commentId) {\n      console.log('尝试滚动到评论:', commentId);\n      // 创建选择器\n      const query = uni.createSelectorQuery().in(this);\n      \n      // 查找所有评论项\n      query.selectAll('.comment-item').boundingClientRect(rects => {\n        if (!rects || rects.length === 0) return;\n        \n        // 找到目标评论的索引\n        const targetIndex = this.comments.findIndex(comment => comment._id === commentId);\n        \n        if (targetIndex !== -1 && rects[targetIndex]) {\n          const commentTop = rects[targetIndex].top;\n          \n          // 滚动到评论位置\n          uni.pageScrollTo({\n            scrollTop: commentTop - 100, // 减去一点偏移量，确保评论完全可见\n            duration: 300\n          });\n          \n          // 高亮显示评论\n          this.highlightComment(commentId);\n        }\n      }).exec();\n    },\n    \n    // 高亮特定评论\n    highlightComment(commentId) {\n      this.highlightedCommentId = commentId;\n      \n      // 3秒后取消高亮\n      setTimeout(() => {\n        this.highlightedCommentId = '';\n      }, 3000);\n    },\n    \n    // 格式化评论内容，处理@标记\n    formatCommentContent(content) {\n      if (!content) return '';\n      \n      // 替换@用户为高亮样式\n      return content.replace(/@([^\\s]+)/g, '<text class=\"mention-text\">@$1</text>');\n    },\n    \n    // 处理评论输入框中的@符号\n    handleCommentInput(e) {\n      const content = e.detail.value;\n      const lastChar = content[content.length - 1];\n      \n      // 当用户输入@时，显示用户搜索框\n      if (lastChar === '@') {\n        this.showUserSearchBox = true;\n        this.userSearchKeyword = '';\n        this.searchUsers('');\n      }\n    },\n    \n    // 搜索用户\n    async searchUsers(keyword) {\n      this.userSearchLoading = true;\n      \n      try {\n        const res = await uniCloud.callFunction({\n          name: 'searchUsers',\n          data: {\n            keyword,\n            limit: 10\n          }\n        });\n        \n        if (res.result.code === 0) {\n          this.userSearchResults = res.result.data || [];\n        } else {\n          this.userSearchResults = [];\n        }\n      } catch (error) {\n        console.error('搜索用户失败:', error);\n        this.userSearchResults = [];\n      } finally {\n        this.userSearchLoading = false;\n      }\n    },\n    \n    // 处理用户搜索关键词变化\n    handleUserSearchInput(e) {\n      this.userSearchKeyword = e.detail.value;\n      this.searchUsers(this.userSearchKeyword);\n    },\n    \n    // 选择要@的用户\n    selectUserToMention(user) {\n      // 添加到输入框中，只显示昵称\n      if (this.$refs.commentInput) {\n        // 获取当前输入框内容\n        const currentContent = this.$refs.commentInput.value || '';\n        // 找到最后一个@的位置\n        const lastAtPos = currentContent.lastIndexOf('@');\n        \n        if (lastAtPos !== -1) {\n          // 替换@后的内容为选中的用户昵称\n          const newContent = currentContent.substring(0, lastAtPos) + '@' + user.nickname + ' ';\n          this.$refs.commentInput.value = newContent;\n          \n          // 记录已@的用户，包含ID信息\n          this.mentionedUsers.push({\n            id: user._id,\n            nickname: user.nickname,\n            position: lastAtPos\n          });\n        }\n      }\n      \n      // 关闭搜索框\n      this.showUserSearchBox = false;\n    },\n    \n    // 添加一个辅助方法\n    checkRendering() {\n      console.log('渲染检查:');\n      console.log('当前标签页:', this.activeTab);\n      console.log('评论加载状态:', this.commentsLoading);\n      console.log('评论数量:', this.comments.length);\n      console.log('点赞用户数量:', this.likeUsers.length);\n\n      if (this.comments.length === 0 && !this.commentsLoading) {\n        console.log('评论列表为空，尝试重新加载');\n        this.loadComments(this.postId, true);\n      }\n    },\n    \n    // 添加调试辅助方法\n    debugComments() {\n      console.log('========== 评论调试信息 ==========');\n      console.log('活动标签:', this.activeTab);\n      console.log('评论数组长度:', this.comments.length);\n      console.log('评论加载状态:', this.commentsLoading);\n      console.log('评论数据:', JSON.stringify(this.comments));\n      console.log('=================================');\n      \n      // 检查触发条件\n      const showLoading = this.commentsLoading && !this.comments.length;\n      const showEmpty = !this.commentsLoading && !this.comments.length;\n      const showList = !this.commentsLoading && this.comments.length > 0;\n      \n      console.log('显示状态:', {\n        显示加载中: showLoading,\n        显示空状态: showEmpty,\n        显示评论列表: showList\n      });\n    },\n    \n    // 添加到methods中，帮助排查问题\n    debugState() {\n      console.log('========== 当前状态信息 ==========');\n      console.log('页面状态:', {\n        activeTab: this.activeTab,\n        isDetailLoading: this.isDetailLoading,\n        hasInitialized: this.hasInitialized,\n        commentsLoaded: this.commentsLoaded\n      });\n      \n      console.log('评论状态:', {\n        总数: this.comments.length,\n        加载中: this.commentsLoading,\n        当前页: this.commentsPage,\n        全部加载完毕: this.commentsFinished\n      });\n\n      console.log('点赞状态:', {\n        总数: this.likeUsers.length,\n        加载中: this.likeUsersLoading\n      });\n      console.log('====================================');\n    },\n    \n    // 添加调试辅助方法\n    debugCommentData() {\n      if (this.comments.length === 0) {\n        uni.showToast({\n          title: '没有评论可供调试',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      const firstComment = this.comments[0];\n      const debugInfo = {\n        id: firstComment._id,\n        content: firstComment.content,\n        hasContent: !!firstComment.content,\n        contentLength: firstComment.content ? firstComment.content.length : 0,\n        userInfo: firstComment.userInfo\n      };\n      \n      console.log('评论调试信息:', debugInfo);\n      \n      // 显示弹窗\n      uni.showModal({\n        title: '评论调试信息',\n        content: JSON.stringify(debugInfo, null, 2),\n        showCancel: false\n      });\n    },\n    \n    // 添加图片错误处理方法\n    handleImageError(comment) {\n      console.log(`图片加载失败: ${comment.image}`);\n      comment.imageLoadError = true;\n      // 可以在这里添加重试逻辑或错误提示\n    },\n    \n    // 辅助方法：验证图片URL\n    validateImageUrl(url) {\n      if (!url) return false;\n      \n      // 基本URL格式验证\n      const isValidUrl = /^(https?:\\/\\/|\\/|\\.\\/|\\.\\.\\/)/i.test(url);\n      \n      // 检查是否为常见图片格式\n      const isImageExtension = /\\.(jpg|jpeg|png|gif|webp|bmp)$/i.test(url);\n      \n      return isValidUrl && isImageExtension;\n    },\n    \n    // 添加调试辅助方法\n    debugCommentImages() {\n      console.log('===== 评论图片调试 =====');\n      this.comments.forEach((comment, index) => {\n        console.log(`评论 ${index + 1}:`, {\n          id: comment._id,\n          userId: comment.userId,\n          content: comment.content?.substring(0, 20),\n          hasImage: !!comment.image\n        });\n      });\n      \n      // 向用户展示统计信息\n      uni.showModal({\n        title: '评论图片统计',\n        content: `评论总数: ${this.comments.length}\\n有图片评论: ${this.comments.filter(c => !!c.image).length}`,\n        showCancel: false\n      });\n    },\n    \n    // 添加到methods中\n    logCommentImages() {\n      // 遍历comments并输出所有带图片属性的评论\n      console.log('==== 所有评论图片信息 ====');\n      let hasImages = false;\n      \n      this.comments.forEach((comment, index) => {\n        if (comment.image) {\n          hasImages = true;\n          console.log(`评论${index+1}:`, {\n            id: comment._id,\n            图片URL: comment.image,\n            正文: comment.content ? comment.content.substring(0, 20) : '无内容'\n          });\n        }\n      });\n      \n      if (!hasImages) {\n        console.log('没有评论包含图片属性');\n      }\n      \n      // 获取comment_images表数据\n      uniCloud.callFunction({\n        name: 'admin',\n        data: {\n          action: 'getTableData',\n          table: 'comment_images',\n          limit: 10\n        }\n      }).then(res => {\n        console.log('comment_images表数据:', res.result);\n      }).catch(err => {\n        console.error('获取comment_images表数据失败:', err);\n      });\n    },\n    \n    // 在methods中添加调试方法\n    debugImageRendering() {\n      console.log('===== 评论图片渲染调试 =====');\n      \n      // 检查所有评论\n      this.comments.forEach((comment, index) => {\n        console.log(`评论 ${index+1}:`, {\n          id: comment._id,\n          content: comment.content?.substring(0, 20) + '...',\n          hasImage: !!comment.image,\n          imageURL: comment.image\n        });\n      });\n      \n      // 检查有图片属性的评论\n      const commentsWithImageProp = this.comments.filter(c => !!c.image);\n      console.log(`有image属性的评论: ${commentsWithImageProp.length}/${this.comments.length}`);\n      \n      // 测试图片URL是否可访问\n      if (commentsWithImageProp.length > 0) {\n        const firstImage = commentsWithImageProp[0].image;\n        console.log(`第一张图片URL: ${firstImage}`);\n        \n        // 创建一个图片对象测试URL有效性\n        const img = new Image();\n        img.onload = () => console.log('图片URL有效，可以加载');\n        img.onerror = () => console.log('图片URL无效，无法加载');\n        img.src = firstImage;\n      }\n    },\n    \n    // 刷新点赞状态\n    async refreshLikeState() {\n      try {\n        if (!this.userId || !this.detail || !this.detail._id) return;\n        \n        // 这里只检查点赞状态，不更新点赞数量\n        const res = await uniCloud.callFunction({\n          name: 'checkLikeStatus',\n          data: {\n            userId: this.userId,\n            targetId: this.detail._id,\n            type: 'post',\n            timestamp: Date.now()\n          }\n        });\n        \n        if (res.result && res.result.code === 0) {\n          // 只更新点赞状态，不改变点赞数量\n          const isLiked = !!res.result.data.isLiked;\n          \n          // 只有当状态不同时才更新\n          if (this.detail.isLiked !== isLiked) {\n            console.log('更新点赞状态:', isLiked);\n            this.detail.isLiked = isLiked;\n          }\n        }\n      } catch (error) {\n        console.error('刷新点赞状态失败:', error);\n      }\n    },\n    \n    // 新增方法：专门获取帖子的点赞数\n    async fetchPostLikeCount() {\n      if (!this.postId) return;\n      \n      try {\n        const res = await uniCloud.callFunction({\n          name: 'getPostDetail',\n          data: { \n            postId: this.postId,\n            userId: this.userId,\n            fields: ['likeCount'] // 只获取点赞数\n          }\n        });\n        \n        if (res.result && res.result.code === 0 && res.result.data) {\n          // 更新点赞计数\n          if (typeof res.result.data.likeCount === 'number') {\n            console.log('从帖子详情获取到点赞数:', res.result.data.likeCount);\n            this.detail.likeCount = res.result.data.likeCount;\n          }\n        }\n      } catch (error) {\n        console.error('获取帖子点赞数失败:', error);\n      }\n    },\n    \n    // 添加同步点赞状态的新方法\n    syncLikeStateFromStorage() {\n      if (!this.detail || !this.detail._id) return;\n      \n      try {\n        const likedPosts = uni.getStorageSync('likedPosts') || {};\n        const storedLikeState = likedPosts[this.detail._id];\n        \n        // 如果本地有存储的点赞状态且时间不超过24小时\n        if (storedLikeState && Date.now() - storedLikeState.timestamp < 24 * 60 * 60 * 1000) {\n          // 使用存储的点赞状态\n          this.detail.isLiked = true;\n          // 为了确保数据一致性，这里不直接使用存储的点赞数量\n        } else if (this.detail._id) {\n          // 从服务器刷新点赞状态\n          this.refreshLikeState();\n        }\n      } catch (error) {\n        console.error('同步点赞状态失败:', error);\n      }\n    },\n    \n    // 处理用户头像加载错误\n    handleUserAvatarError(user) {\n      if (user) {\n        // 只设置默认头像\n        user.avatar = '/static/images/default-avatar.png';\n        \n        // 记录问题，但不尝试更新\n        console.warn(`用户 ${user._id} 头像加载失败`);\n      }\n    },\n    \n    // 在methods中添加\n    debugFollowStatus() {\n      console.log('=== 关注状态调试 ===');\n      console.log('当前用户ID:', this.userId);\n      console.log('帖子作者ID:', this.detail?.userInfo?._id);\n      console.log('当前关注状态:', this.isFollowing);\n      \n      // 检查本地存储\n      const followedUsers = uni.getStorageSync('followedUsers') || {};\n      const storedState = followedUsers[this.detail?.userInfo?._id];\n      console.log('本地存储的关注状态:', storedState);\n      \n      // 强制刷新关注状态\n      this.checkFollowStatus().then(() => {\n        console.log('关注状态刷新后:', this.isFollowing);\n        uni.showToast({\n          title: this.isFollowing ? '已关注' : '未关注',\n          icon: 'none'\n        });\n      });\n    },\n    \n    // 同步点赞状态到服务器\n    async syncLikeStatus(commentId, isLiked) {\n      try {\n        console.log(`同步评论点赞状态: 评论ID=${commentId}, 点赞=${isLiked}`);\n        await uniCloud.callFunction({\n          name: 'toggleLike',\n          data: {\n            userId: this.userId,\n            targetId: commentId,\n            type: 'comment',\n            isLiked: isLiked, // 明确指定点赞状态\n            timestamp: Date.now()\n          }\n        });\n        console.log(`同步评论点赞状态成功: 评论ID=${commentId}`);\n      } catch (error) {\n        console.error('同步评论点赞状态失败:', error);\n      }\n    },\n    \n    // 在methods对象中添加\n    editPost() {\n      uni.navigateTo({\n        url: `/pages/publish/publish?id=${this.detail._id}&edit=1`\n      });\n    }\n  }\n}\n</script>\n\n<style>\n.container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: #f8f8f8;\n  position: relative;\n  padding: 0;\n}\n\n.content-scroll {\n  flex: 1;\n  height: calc(100vh - 120rpx);\n  padding-bottom: 120rpx;\n  box-sizing: border-box;\n}\n\n/* 用户信息样式 */\n.user-info {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 30rpx 30rpx 20rpx;\n  background-color: #fff;\n  position: relative;\n}\n\n.user-left {\n  display: flex;\n  align-items: center;\n  max-width: 65%; /* 减小左侧内容宽度，确保右侧按钮有更多空间 */\n}\n\n.avatar {\n  width: 80rpx;\n  height: 80rpx;\n  border-radius: 50%;\n  background-color: #f0f0f0;\n  border: 2rpx solid #fff;\n  box-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.1);\n}\n\n.user-meta {\n  margin-left: 16rpx;\n}\n\n.nickname {\n  font-size: 30rpx;\n  color: #333;\n  font-weight: 500;\n}\n\n.time {\n  font-size: 24rpx;\n  color: #999;\n  display: block;\n  margin-top: 4rpx;\n}\n\n.follow-btn {\n  padding: 12rpx 30rpx;\n  background: linear-gradient(135deg, #FF8200, #FF5500);\n  color: white;\n  border-radius: 40rpx;\n  font-size: 28rpx;\n  font-weight: normal;\n  line-height: 1.5;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4rpx 10rpx rgba(255, 130, 0, 0.3);\n  margin-left: auto;\n  min-width: 160rpx; /* 增加最小宽度 */\n  position: absolute; /* 使用绝对定位 */\n  right: 30rpx; /* 固定在右侧 */\n  top: 50%; /* 居中 */\n  transform: translateY(-50%); /* 垂直居中 */\n  transition: all 0.3s ease;\n}\n\n.follow-btn.following {\n  background: #f5f5f5;\n  color: #666;\n  box-shadow: none;\n  border: 1rpx solid #e0e0e0;\n}\n\n.follow-icon-text {\n  font-size: 28rpx;\n  margin-right: 10rpx;\n  font-weight: bold;\n}\n\n.user-right {\n  display: flex;\n  align-items: center;\n}\n\n/* 内容样式 */\n.content {\n  padding: 20rpx 30rpx;\n  background-color: #fff;\n}\n\n.content-text {\n  font-size: 30rpx;\n  line-height: 1.6;\n  color: #333;\n  margin-bottom: 16rpx;\n  word-break: break-all;\n}\n\n.image-grid {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -5rpx;\n}\n\n.image-grid image {\n  width: calc(33.33% - 10rpx);\n  height: 200rpx;\n  margin: 5rpx;\n  border-radius: 8rpx;\n  background-color: #f0f0f0;\n}\n\n/* 互动栏样式 */\n.action-bar {\n  display: flex;\n  justify-content: space-around;\n  padding: 20rpx 0;\n  background-color: #fff;\n  margin-bottom: 20rpx;\n  border-top: 1rpx solid #f0f0f0;\n}\n\n.action-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.action-icon {\n  width: 44rpx;\n  height: 44rpx;\n  margin-bottom: 6rpx;\n  transition: all 0.2s ease;\n}\n\n.action-icon.liked {\n  transform: scale(1.1);\n  filter: none; /* 确保没有任何滤镜效果 */\n}\n\n.action-item text.liked {\n  color: #ff5757;\n  font-weight: 500;\n}\n\n/* 添加点赞按钮激活效果 */\n.action-item:active {\n  opacity: 0.8;\n}\n\n/* 评论区样式 */\n.comment-section {\n  background-color: #fff;\n  padding: 0;\n}\n\n.comment-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20rpx 30rpx;\n  border-bottom: 1rpx solid #f0f0f0;\n}\n\n.header-tabs {\n  display: flex;\n  align-items: center;\n}\n\n.tab-item {\n  display: flex;\n  align-items: center;\n  font-size: 28rpx;\n  color: #666;\n  margin-right: 30rpx;\n  padding-bottom: 6rpx;\n  position: relative;\n}\n\n.tab-item.active {\n  color: #333;\n  font-weight: 500;\n}\n\n.tab-item.active:after {\n  content: '';\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 4rpx;\n  background-color: #ff8200;\n  border-radius: 2rpx;\n}\n\n.comment-filter {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20rpx 30rpx;\n  border-bottom: 1rpx solid #f0f0f0;\n  background-color: #fff;\n}\n\n.comment-sort-options {\n  display: flex;\n  background: #f5f5f5;\n  border-radius: 40rpx;\n  padding: 4rpx;\n  width: 300rpx;\n  box-sizing: border-box;\n}\n\n.sort-option {\n  flex: 1;\n  text-align: center;\n  padding: 12rpx 0;\n  font-size: 26rpx;\n  color: #666;\n  border-radius: 36rpx;\n  transition: all 0.3s;\n}\n\n.sort-option.active {\n  background: #ffffff;\n  color: #ff8200;\n  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.1);\n  font-weight: 500;\n}\n\n/* 评论列表样式 */\n.comment-list {\n  padding: 0 30rpx;\n  padding-bottom: env(safe-area-inset-bottom);\n}\n\n.comment-item {\n  display: flex;\n  padding: 20rpx 0;\n  border-bottom: 1rpx solid #f5f5f5;\n  position: relative;\n}\n\n.comment-item.highlighted {\n  background-color: rgba(255, 230, 82, 0.2);\n  transition: background-color 0.5s ease;\n}\n\n.comment-avatar {\n  width: 70rpx;\n  height: 70rpx;\n  border-radius: 50%;\n  background-color: #f0f0f0;\n  flex-shrink: 0;\n}\n\n.comment-right {\n  margin-left: 16rpx;\n  flex: 1;\n  overflow: hidden;\n}\n\n.comment-user {\n  margin-bottom: 4rpx;\n}\n\n.comment-nickname {\n  font-size: 28rpx;\n  color: #333;\n  font-weight: 500;\n}\n\n.reply-info {\n  margin-bottom: 4rpx;\n  font-size: 26rpx;\n}\n\n.reply-text {\n  color: #999;\n}\n\n.reply-nickname {\n  color: #3366cc;\n}\n\n.comment-content {\n  margin: 8rpx 0;\n  width: 100%;\n}\n\n.comment-text {\n  font-size: 28rpx;\n  color: #333;\n  line-height: 1.5;\n  word-break: break-all;\n  display: block;\n}\n\n.comment-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 12rpx;\n  padding-top: 8rpx;\n}\n\n.comment-time {\n  font-size: 24rpx;\n  color: #999;\n}\n\n.comment-actions {\n  display: flex;\n  align-items: center;\n}\n\n.action-item {\n  display: flex;\n  align-items: center;\n  margin-left: 20rpx;\n  padding: 4rpx 12rpx;\n  border-radius: 20rpx;\n}\n\n.action-icon-small {\n  width: 32rpx;\n  height: 32rpx;\n  margin-right: 6rpx;\n}\n\n.action-item text {\n  font-size: 24rpx;\n  color: #666;\n}\n\n.action-item text.liked {\n  color: #ff5757;\n  font-weight: 500;\n}\n\n.action-icon-small.liked {\n  transform: scale(1.1);\n}\n\n.action-icon-small.like-loading {\n  opacity: 0.7;\n}\n\n/* 评论图片的样式 */\n.comment-image-container {\n  margin-top: 10px;\n  width: 100%;\n}\n\n.comment-image {\n  max-width: 300rpx;\n  border-radius: 8rpx;\n  background-color: #f5f5f5;\n}\n\n.comment-image:active {\n  opacity: 0.8;\n}\n\n.image-error {\n  font-size: 24rpx;\n  color: #999;\n  margin-top: 4rpx;\n}\n\n/* 确保评论内容正确显示 */\n.comment-content {\n  padding: 10rpx 0;\n  word-break: break-all;\n}\n\n/* 底部评论栏 */\n.bottom-bar {\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #fff;\n  padding: 16rpx 30rpx;\n  padding-bottom: calc(16rpx + env(safe-area-inset-bottom));\n  display: flex;\n  align-items: center;\n  border-top: 1rpx solid #f0f0f0;\n  z-index: 100;\n}\n\n.input-box {\n  flex: 1;\n  background-color: #f5f5f5;\n  border-radius: 36rpx;\n  padding: 16rpx 30rpx;\n  color: #999;\n  font-size: 28rpx;\n}\n\n.bottom-actions {\n  display: flex;\n  margin-left: 20rpx;\n}\n\n.action-btn {\n  width: 60rpx;\n  height: 60rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 10rpx;\n}\n\n.action-btn-icon {\n  width: 44rpx;\n  height: 44rpx;\n}\n\n/* 空状态样式优化 */\n.empty-state {\n  padding: 30rpx 0;\n  text-align: center;\n}\n\n.empty-text {\n  font-size: 28rpx;\n  color: #999;\n  display: block;\n}\n\n/* 点赞用户列表样式 */\n.like-users-list {\n  padding: 0 30rpx;\n  padding-bottom: env(safe-area-inset-bottom);\n}\n\n.like-user-item {\n  display: flex;\n  padding: 20rpx 0;\n  border-bottom: 1rpx solid #f5f5f5;\n  position: relative;\n}\n\n.like-user-avatar {\n  width: 70rpx;\n  height: 70rpx;\n  border-radius: 50%;\n  background-color: #f0f0f0;\n  flex-shrink: 0;\n}\n\n.like-user-info {\n  margin-left: 16rpx;\n  flex: 1;\n  overflow: hidden;\n}\n\n.like-user-nickname {\n  font-size: 28rpx;\n  color: #333;\n  font-weight: 500;\n}\n\n.like-user-time {\n  font-size: 24rpx;\n  color: #999;\n}\n\n/* 用户搜索框样式 */\n.user-search-box {\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  right: 0;\n  background-color: #fff;\n  border-radius: 12rpx 12rpx 0 0;\n  box-shadow: 0 -2rpx 10rpx rgba(0, 0, 0, 0.1);\n  max-height: 600rpx;\n  z-index: 10;\n}\n\n.search-input-wrap {\n  padding: 20rpx;\n  border-bottom: 1rpx solid #f5f5f5;\n}\n\n.search-input-wrap input {\n  height: 70rpx;\n  background-color: #f5f5f5;\n  border-radius: 35rpx;\n  padding: 0 30rpx;\n}\n\n.mention-text {\n  color: #007AFF;\n  font-weight: bold;\n}\n\n/* 更新样式，确保点赞数字与图标颜色一致 */\n.action-item.like .action-icon.liked {\n  transform: scale(1.1);\n  filter: none; /* 确保图标显示正常 */\n}\n\n.action-item text.liked {\n  color: #ff5757;\n  font-weight: 500;\n}\n\n/* 确保点赞标签页显示正确数量 */\n.tab-item text {\n  font-size: 28rpx;\n  white-space: nowrap;\n}\n\n/* 仅在开发环境显示的调试按钮，添加在页面底部 */\n.debug-btn {\n  position: fixed;\n  bottom: 100%;\n  left: 0;\n  right: 0;\n  background-color: #fff;\n  border-radius: 12rpx 12rpx 0 0;\n  box-shadow: 0 -2rpx 10rpx rgba(0, 0, 0, 0.1);\n  max-height: 600rpx;\n  z-index: 10;\n  padding: 16rpx 30rpx;\n  padding-bottom: calc(16rpx + env(safe-area-inset-bottom));\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-top: 1rpx solid #f0f0f0;\n}\n\n.debug-btn text {\n  font-size: 28rpx;\n  color: #999;\n}\n\n/* 评论点赞样式 */\n.comment-actions .action-icon-small {\n  width: 32rpx;\n  height: 32rpx;\n  margin-right: 6rpx;\n  transition: all 0.2s ease;\n}\n\n.comment-actions .action-icon-small.liked {\n  color: #ff5757;\n  transform: scale(1.1);\n}\n\n.comment-actions .action-item text.liked {\n  color: #ff5757;\n  font-weight: 500;\n}\n\n/* 点赞动画效果 */\n.like-animate {\n  animation: like-pulse 0.5s ease;\n}\n\n@keyframes like-pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.3); }\n  100% { transform: scale(1.1); }\n}\n\n/* 点赞加载动画 */\n.like-loading {\n  opacity: 0.7;\n}\n\n/* 确保评论操作区域有足够空间 */\n.comment-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10rpx;\n}\n\n.comment-actions {\n  display: flex;\n  gap: 20rpx;\n}\n\n.comment-actions .action-item {\n  display: flex;\n  align-items: center;\n  padding: 6rpx 10rpx;\n  border-radius: 20rpx;\n  transition: all 0.2s;\n}\n\n.comment-actions .action-item:active {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.edit-btn {\n  padding: 12rpx 30rpx;\n  background: linear-gradient(135deg, #FF8200, #FF5500);\n  color: white;\n  border-radius: 40rpx;\n  font-size: 28rpx;\n  font-weight: normal;\n  line-height: 1.5;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4rpx 10rpx rgba(255, 130, 0, 0.3);\n  margin-left: 10rpx;\n  min-width: 160rpx; /* 增加最小宽度 */\n  position: absolute; /* 使用绝对定位 */\n  right: 30rpx; /* 固定在右侧 */\n  top: 50%; /* 居中 */\n  transform: translateY(-50%); /* 垂直居中 */\n  transition: all 0.3s ease;\n}\n\n.edit-btn.following {\n  background: #f5f5f5;\n  color: #666;\n  box-shadow: none;\n  border: 1rpx solid #e0e0e0;\n}\n\n.edit-icon-text {\n  font-size: 28rpx;\n  margin-right: 10rpx;\n  font-weight: bold;\n}\n</style> ","import mod from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./detail.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1743161663385\n      var cssReload = require(\"D:/Hbuilderx/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}