{"version":3,"sources":["uni-app:///main.js","webpack:///H:/测试小程序/pages/message/message.vue?f1cc","webpack:///H:/测试小程序/pages/message/message.vue?53ae","webpack:///H:/测试小程序/pages/message/message.vue?0936","webpack:///H:/测试小程序/pages/message/message.vue?8dee","uni-app:///pages/message/message.vue","webpack:///H:/测试小程序/pages/message/message.vue?0922","webpack:///H:/测试小程序/pages/message/message.vue?ec83"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","data","currentType","interactionList","chatList","interactionPage","chatPage","interactionLoading","chatLoading","refreshingInteraction","refreshingChat","hasMoreInteractions","hasMoreChats","pageSize","showDebugTools","debugItem","activeTab","user","actionSheetVisible","currentItem","currentIndex","reportOptions","text","value","fallbackData","useFallback","lastSuccessTime","onLoad","onShow","console","selected","methods","checkAuth","uni","title","icon","changeTab","callCloudFunction","options","defaultTimeout","timeout","retries","showError","attemptCount","lastError","mask","uniCloud","name","result","isRetryable","waitTime","duration","loadWithFallback","userId","page","res","Date","cache","list","hasMore","total","loadInteractions","reset","deletedIds","filteredList","processedList","item","senderNickname","senderAvatar","displayContent","createTime","postContent","postImages","contentProcessed","newList","newItem","formatInteractionContent","loadMoreInteractions","refreshInteractions","reloadInteractions","loadChats","loadMoreChats","refreshChats","navigateToChat","url","markChatRead","chatId","index","formatTime","getInteractionTypeText","navigateToInteraction","markInteractionRead","messageId","messageIndex","goBack","showInteractionActions","itemList","success","deleteInteraction","interactionId","checkNetwork","reject","resolve","debugInteractionMessages","content","confirmText","debugInteractionState","limit","previewPostImage","event","urls","current","fail","previewCommentImage","showDeleteConfirm","confirmColor","deleteInteractionLocally","enrichInteractionsWithPostData","postIds","filter","map","cachedPosts","hasAllCached","postId","postMap","postRes","posts","interactions","fetchPostsIndividually","singlePostRes","post","showChatDeleteConfirm","deleteChatSession"],"mappings":"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QACA;MACA;IACA;IAEAC;MACA;MACA;IACA;IAEA;IACAC;MACA;QACA;QACA;;QAEA;QACAlD;UACAmD;QACA;MACA;QACAvD;MACA;IACA;IAEA;IACAwD;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAhC;gBAAA,IACAA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA,OAEA;kBACAA;kBACAiC;gBACA;kBACA9C;kBACAC;gBACA;cAAA;gBANAc;gBAQA;kBACA;kBACAgC;oBAAA;kBAAA;kBACA;oBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEA1D;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACA2D;MACA;MAEA;MACA;MACA;;MAEA;MACA;QACA;MACA;;MAEA;MACA;QACA;MACA;;MAEA;MACA;QACA;MACA;;MAEA;MACA;QACA;MACA;;MAEA;MACA;MACA;MACA;MAEA;IACA;IAEA;IACAC;MACA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAC;MACA;QACA7D;;QAEA;QACA;;QAEA;QACA;UACA;UACA;UACA;YACAuD;UACA;UACAnD;YAAAmD;UAAA;QACA;UACA;UACAnD;YACAmD;UACA;QACA;UACA;UACAnD;YACAC;YACAC;UACA;QACA;UACAN;UACA;UACA;YACAI;cACAmD;YACA;UACA;YACAnD;cACAC;cACAC;YACA;UACA;QACA;MACA;QACAN;QACAI;UACAC;UACAC;QACA;MACA;IACA;IAEA;IACAwD;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACAC;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA,OAGA9C;kBACAC;kBACA9C;oBACA2F;oBACAvC;kBACA;gBACA;cAAA;gBANAE;gBAQA;kBACA;kBACAsC;oBAAA;kBAAA;kBACA;oBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAhE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAiE;MACA7D;IACA;IAEA;IACA8D;MAAA;MACA;QACA;QACA;UACA9D;YACAC;YACAC;UACA;UACA;QACA;QAEAF;UACA+D;UACAC;YACA;cACA;YACA;UACA;QACA;MACA;QACApE;MACA;IACA;IAEA;IACAqE;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEA7C;gBAAA,IACAA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAEApB;kBACAC;gBACA;;gBAEA;gBAAA;gBAAA,OACA;kBACAmB;kBACA8C;gBACA;kBACA3D;kBACAC;gBACA;cAAA;gBANAc;gBAQAtB;gBAEA;kBACA;kBACA;oBAAA;kBAAA;kBACAA;oBACAC;oBACAC;kBACA;gBACA;kBACA;kBACAN;kBACA;oBAAA;kBAAA;kBACAI;oBACAC;oBACAC;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAF;gBACAJ;;gBAEA;gBACA;kBAAA;gBAAA;gBACAI;kBACAC;kBACAC;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;IACAiE;MACA;QACAnE;UACAgE;YACA;cACAhE;gBACAC;gBACAC;cACA;cACAkE;YACA;cACAC;YACA;UACA;QACA;MACA;IACA;IAEA;IACAC;MAAA;MACA;;MAEA;MACAtE;QACAC;QACAsE;QACAC;QACAR;UACA;YACA;UACA;QACA;MACA;IACA;IAEA;IACAS;MACA7E;MACA;MACAA;MACAA;MACAA;MACAA;MACAA;;MAEA;MACAiB;QACAC;QACA9C;UAAA0G;QAAA;MACA;QACA9E;QAEA;UACAA;UACAA;UACAA;UACAA;QACA;MACA;QACAA;MACA;IACA;IAEA;IACA+E;MACA;QACAC;MACA;;MAEA;QACA;MACA;MAEAhF;;MAEA;MACA;QAAA,OACA;MAAA,EACA;MAEA;QACAI;UACAC;UACAC;QACA;QACA;MACA;MAEAF;QACA6E;QACAC;QACAd;UACApE;QACA;QACAmF;UAC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","file":"pages/message/message.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;import '@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js';\nimport Vue from 'vue'\nimport Page from './pages/message/message.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./message.vue?vue&type=template&id=a91f51d4&\"\nvar renderjs\nimport script from \"./message.vue?vue&type=script&lang=js&\"\nexport * from \"./message.vue?vue&type=script&lang=js&\"\nimport style0 from \"./message.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\runtime\\\\componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/message/message.vue\"\nexport default component.exports","export * from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\templateLoader.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--17-0!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\template.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-uni-app-loader\\\\page-meta.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./message.vue?vue&type=template&id=a91f51d4&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  var g0 =\n    _vm.currentType === \"interaction\"\n      ? _vm.interactionList.length === 0 && !_vm.interactionLoading\n      : null\n  var l1 =\n    _vm.currentType === \"interaction\" && !g0\n      ? _vm.__map(_vm.interactionList, function (item, index) {\n          var $orig = _vm.__get_orig(item)\n          var m0 = _vm.formatTime(item.createTime)\n          var g1 = item.fileID && item.fileID.length > 0\n          var g2 = item.postId\n            ? item.postImages && item.postImages.length > 0\n            : null\n          var l0 = item.postId && g2 ? item.postImages.slice(0, 3) : null\n          var g3 = item.postId && g2 ? item.postImages.length : null\n          var g4 = item.postId && g2 && g3 > 3 ? item.postImages.length : null\n          return {\n            $orig: $orig,\n            m0: m0,\n            g1: g1,\n            g2: g2,\n            l0: l0,\n            g3: g3,\n            g4: g4,\n          }\n        })\n      : null\n  var g5 =\n    !(_vm.currentType === \"interaction\") && _vm.currentType === \"chat\"\n      ? _vm.chatList.length === 0 && !_vm.chatLoading\n      : null\n  var l2 =\n    !(_vm.currentType === \"interaction\") && _vm.currentType === \"chat\" && !g5\n      ? _vm.__map(_vm.chatList, function (item, index) {\n          var $orig = _vm.__get_orig(item)\n          var m1 = _vm.formatTime(item.lastMessageTime)\n          return {\n            $orig: $orig,\n            m1: m1,\n          }\n        })\n      : null\n  _vm.$mp.data = Object.assign(\n    {},\n    {\n      $root: {\n        g0: g0,\n        l1: l1,\n        g5: g5,\n        l2: l2,\n      },\n    }\n  )\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--13-1!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./message.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--13-1!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\script.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./message.vue?vue&type=script&lang=js&\"","<template>\n\t<view class=\"container\">\n\t\t<!-- 消息分类导航 -->\n\t\t<view class=\"message-nav\">\n\t\t\t<view class=\"nav-buttons\">\n\t\t\t\t<view \n\t\t\t\t\tclass=\"nav-button\" \n\t\t\t\t\t:class=\"{'active': currentType === 'interaction'}\" \n\t\t\t\t\t@tap=\"changeTab('interaction')\"\n\t\t\t\t>\n\t\t\t\t\t<view class=\"icon-circle interaction-icon\" :class=\"{'active': currentType === 'interaction'}\">\n\t\t\t\t\t\t<text class=\"icon-text\">👤</text>\n\t\t\t\t</view>\n\t\t\t\t\t<text class=\"nav-text\">互动</text>\n\t\t\t</view>\n\t\t\t\t<view \n\t\t\t\t\tclass=\"nav-button\" \n\t\t\t\t\t:class=\"{'active': currentType === 'chat'}\" \n\t\t\t\t\t@tap=\"changeTab('chat')\"\n\t\t\t\t>\n\t\t\t\t\t<view class=\"icon-circle chat-icon\" :class=\"{'active': currentType === 'chat'}\">\n\t\t\t\t\t\t<text class=\"icon-text\">💬</text>\n\t\t\t\t</view>\n\t\t\t\t<text class=\"nav-text\">聊天</text>\n\t\t\t</view>\n\t\t\t\t<view \n\t\t\t\t\tclass=\"nav-button\" \n\t\t\t\t\t:class=\"{'active': currentType === 'system'}\" \n\t\t\t\t\t@tap=\"changeTab('system')\"\n\t\t\t\t>\n\t\t\t\t\t<view class=\"icon-circle system-icon\" :class=\"{'active': currentType === 'system'}\">\n\t\t\t\t\t\t<text class=\"icon-text\">🔔</text>\n\t\t\t\t</view>\n\t\t\t\t\t<text class=\"nav-text\">系统</text>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\n\t\t<!-- 内容区域 -->\n\t\t<view class=\"content-area\">\n\t\t\t<!-- 互动消息列表 -->\n\t\t\t<view class=\"message-list\" v-if=\"currentType === 'interaction'\">\n\t\t\t\t<view v-if=\"interactionList.length === 0 && !interactionLoading\" class=\"empty-tip\">\n\t\t\t\t\t暂无互动消息\n\t\t\t\t\t\t</view>\n\t\t\t\t<view v-else class=\"interaction-list\">\n\t\t\t\t\t<view v-for=\"(item, index) in interactionList\" :key=\"item._id\" class=\"interaction-item\" \n\t\t\t\t\t\t  @tap=\"navigateToInteraction(item)\" @longpress=\"showDeleteConfirm(item, index)\">\n\t\t\t\t\t\t<image class=\"avatar\" :src=\"item.senderAvatar\" mode=\"aspectFill\"></image>\n\t\t\t\t\t\t<view class=\"interaction-content\">\n\t\t\t\t\t\t\t<view class=\"interaction-header\">\n\t\t\t\t\t\t\t\t<text class=\"nickname\">{{item.senderNickname || '用户'}}</text>\n\t\t\t\t\t\t\t\t<text class=\"time\">{{formatTime(item.createTime)}}</text>\n\t\t\t\t</view>\n\t\t\t\t\t\t\t<view class=\"interaction-body\">\n\t\t\t\t\t\t\t\t<view class=\"content\">{{item.displayContent || item.content || ''}}</view>\n\t\t\t\t\t\t\t\t<!-- 评论图片显示 -->\n\t\t\t\t\t\t\t\t<view class=\"interaction-image\" v-if=\"item.fileID && item.fileID.length > 0\" \n\t\t\t\t\t\t\t\t\t  @tap.stop=\"previewCommentImage(item.fileID, $event)\">\n\t\t\t\t\t\t\t\t\t<image :src=\"item.fileID[0]\" mode=\"aspectFill\"></image>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\t\t\t\t\t\t\t<view class=\"interaction-meta\" v-if=\"item.postId\">\n\t\t\t\t\t\t\t\t<view class=\"interaction-post-info\" v-if=\"item.contentProcessed\">\n\t\t\t\t\t\t\t\t\t<uni-icons type=\"chatbubble\" size=\"14\" color=\"#999\"></uni-icons>\n\t\t\t\t\t\t\t\t\t<text>{{item.postContent}}</text>\n\t\t\t\t</view>\n\t\t\t\t\t\t\t\t<view class=\"interaction-post-info\" v-else>\n\t\t\t\t\t\t\t\t\t<uni-icons type=\"info\" size=\"14\" color=\"#999\"></uni-icons>\n\t\t\t\t\t\t\t\t\t<text>加载帖子内容中...</text>\n\t\t\t\t</view>\n\t\t\t\t\t\t\t\t<!-- 显示帖子图片 -->\n\t\t\t\t\t\t\t\t<view class=\"post-images\" v-if=\"item.postImages && item.postImages.length > 0\">\n\t\t\t\t\t\t\t\t\t<view class=\"post-image\" v-for=\"(img, imgIndex) in item.postImages.slice(0, 3)\" :key=\"imgIndex\"\n\t\t\t\t\t\t\t\t\t\t  @tap.stop=\"previewPostImage(item.postImages, imgIndex, $event)\">\n\t\t\t\t\t\t\t\t\t\t<image :src=\"img\" mode=\"aspectFill\"></image>\n\t\t\t</view>\n\t\t\t\t\t\t\t\t\t<text class=\"more-images\" v-if=\"item.postImages.length > 3\">+{{item.postImages.length - 3}}</text>\n\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\t\t\t<view class=\"unread-dot\" v-if=\"!item.isRead\"></view>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view v-if=\"interactionLoading\" class=\"loading-more\">加载中...</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\n\t\t\t<!-- 聊天消息列表 -->\n\t\t\t<view class=\"message-list\" v-else-if=\"currentType === 'chat'\">\n\t\t\t\t<view v-if=\"chatList.length === 0 && !chatLoading\" class=\"empty-tip\">\n\t\t\t\t\t暂无聊天消息\n\t\t\t\t\t\t</view>\n\t\t\t\t<view v-else class=\"chat-list\">\n\t\t\t\t\t<view \n\t\t\t\t\t\tv-for=\"(item, index) in chatList\" \n\t\t\t\t\t\t:key=\"item._id\" \n\t\t\t\t\t\tclass=\"chat-item\" \n\t\t\t\t\t\t@tap=\"navigateToChat(item)\"\n\t\t\t\t\t\t@longpress=\"showChatDeleteConfirm(item, index)\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<image class=\"avatar\" :src=\"item.targetUserAvatar || '/static/images/default-avatar.png'\" mode=\"aspectFill\"></image>\n\t\t\t\t\t\t<view class=\"chat-content\">\n\t\t\t\t\t\t\t<view class=\"chat-header\">\n\t\t\t\t\t\t\t\t<text class=\"nickname\">{{item.targetUserNickname || '用户'}}</text>\n\t\t\t\t\t\t\t\t<text class=\"time\">{{formatTime(item.lastMessageTime)}}</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t<view class=\"chat-body\">\n\t\t\t\t\t\t\t\t<text class=\"last-message\">{{item.lastMessage || ''}}</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t\t<view class=\"unread-badge\" v-if=\"item.unreadCount > 0\">{{item.unreadCount > 99 ? '99+' : item.unreadCount}}</view>\n\t\t\t\t\t</view>\n\t\t\t\t\t<view v-if=\"chatLoading\" class=\"loading-more\">加载中...</view>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\n\t\t\t<!-- 系统消息列表 - 始终显示\"暂无系统消息\" -->\n\t\t\t<view class=\"message-list\" v-else-if=\"currentType === 'system'\">\n\t\t\t\t<view class=\"empty-tip\">\n\t\t\t\t\t暂无系统消息\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\t</view>\n</template>\n\n<script>\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tcurrentType: 'interaction',  // 默认显示互动消息\n\t\t\tinteractionList: [],\n\t\t\tchatList: [],\n\t\t\tinteractionPage: 1,\n\t\t\tchatPage: 1,\n\t\t\tinteractionLoading: false,\n\t\t\tchatLoading: false,\n\t\t\trefreshingInteraction: false,\n\t\t\trefreshingChat: false,\n\t\t\thasMoreInteractions: true,\n\t\t\thasMoreChats: true,\n\t\t\tpageSize: 20,\n\t\t\tshowDebugTools: false, // 是否显示调试工具\n\t\t\tdebugItem: null,\n\t\t\tactiveTab: 0,\n\t\t\tuser: null,\n\t\t\tactionSheetVisible: false,\n\t\t\tcurrentItem: null,\n\t\t\tcurrentIndex: -1,\n\t\t\treportOptions: [\n\t\t\t\t{ text: '垃圾信息', value: 'spam' },\n\t\t\t\t{ text: '违法违规', value: 'illegal' },\n\t\t\t\t{ text: '色情低俗', value: 'pornography' },\n\t\t\t\t{ text: '人身攻击', value: 'attack' },\n\t\t\t\t{ text: '引人不适', value: 'uncomfortable' }\n\t\t\t],\n\t\t\tfallbackData: [],\n\t\t\tuseFallback: false,\n\t\t\tlastSuccessTime: null\n\t\t}\n\t},\n\tonLoad() {\n\t\tthis.checkAuth();\n\t\tthis.loadInteractions(true);\n\t},\n\tonShow() {\n\t\tconsole.log('message页面显示');\n\t\t// 检查登录状态\n\t\tthis.checkAuth();\n\t\t\n\t\t// 确保不会重复加载：只在页面已显示且没有加载中状态时才刷新数据\n\t\tif (this.currentType === 'interaction' && !this.interactionLoading) {\n\t\t\tconsole.log('页面显示时加载互动消息');\n\t\t\tthis.debugInteractionState(); // 添加调试信息\n\t\t\tthis.loadInteractions(true);\n\t\t} else if (this.currentType === 'chat' && !this.chatLoading) {\n\t\t\tconsole.log('页面显示时加载聊天消息');\n\t\t\tthis.loadChats(true);\n\t\t}\n\t\t\n\t\t// 设置tabbar选中状态\n\t\tif (typeof this.getTabBar === 'function' && this.getTabBar()) {\n\t\t\tthis.getTabBar().setData({\n\t\t\t\tselected: 1\n\t\t\t});\n\t\t}\n\t},\n\tmethods: {\n\t\tcheckAuth() {\n\t\t\tconst userId = uni.getStorageSync('userId');\n\t\t\tconsole.log('检查登录状态，用户ID:', userId);\n\t\t\t\n\t\t\t// 仅设置登录状态，不加载数据\n\t\t\tif (!userId) {\n\t\t\t\tconsole.log('用户未登录，清空数据');\n\t\t\t\tthis.interactionList = [];\n\t\t\t\tthis.chatList = [];\n\t\t\t\t\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '请先登录',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// 用户已登录，返回true\n\t\t\treturn true;\n\t\t},\n\t\t\n\t\tchangeTab(type) {\n\t\t\tif (this.currentType === type) return;\n\t\t\t\n\t\t\tconsole.log('切换到', type, '当前是', this.currentType);\n\t\t\t\n\t\t\t// 更新当前类型\n\t\t\tthis.currentType = type;\n\t\t\t\n\t\t\t// 清空原有状态\n\t\t\tif (type === 'interaction') {\n\t\t\t\tthis.interactionList = [];\n\t\t\t\tthis.interactionPage = 1;\n\t\t\t\t// 不要在这里设置loading为true，避免重复设置\n\t\t\t\tthis.hasMoreInteractions = true;\n\t\t\t\t\n\t\t\t\t// 立即加载互动消息\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.loadInteractions(true);\n\t\t\t\t});\n\t\t\t} else if (type === 'chat') {\n\t\t\t\tthis.chatList = [];\n\t\t\t\tthis.chatPage = 1;\n\t\t\t\t// 不要在这里设置loading为true，避免重复设置\n\t\t\t\tthis.hasMoreChats = true;\n\t\t\t\t\n\t\t\t\t// 立即加载聊天列表\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.loadChats(true);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 优化云函数调用方法，增加超时和重试功能\n\t\tasync callCloudFunction(name, data, options = {}) {\n\t\t\t// 针对不同云函数设置不同的默认超时时间\n\t\t\tlet defaultTimeout = 15000; // 默认15秒\n\t\t\tif (name === 'getInteractions') {\n\t\t\t\tdefaultTimeout = 30000; // 互动消息查询给30秒\n\t\t\t} else if (name === 'getChatList') {\n\t\t\t\tdefaultTimeout = 20000; // 聊天列表查询给20秒\n\t\t\t}\n\t\t\t\n\t\t\tconst { \n\t\t\t\ttimeout = defaultTimeout, \n\t\t\t\tretries = name === 'getInteractions' ? 3 : 2, // 互动消息增加重试次数\n\t\t\t\tshowError = true \n\t\t\t} = options;\n\t\t\t\n\t\t\tlet attemptCount = 0;\n\t\t\tlet lastError = null;\n\t\t\t\n\t\t\tconsole.log(`准备调用云函数 ${name}，最大重试次数: ${retries}，超时时间: ${timeout}ms`);\n\t\t\t\n\t\t\twhile (attemptCount <= retries) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.checkNetwork(); // 新增网络检查\n\t\t\t\t\tuni.showLoading({\n\t\t\t\t\t\ttitle: attemptCount > 0 ? `重试中(${attemptCount}/${retries})` : '请求中',\n\t\t\t\t\t\tmask: true\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tconsole.log(`调用云函数 ${name}，参数:`, data, `第${attemptCount + 1}次尝试`);\n\t\t\t\t\t\n\t\t\t\t\tconst result = await uniCloud.callFunction({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\ttimeout\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tuni.hideLoading();\n\t\t\t\t\tconsole.log(`云函数 ${name} 调用成功`);\n\t\t\t\t\treturn result;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tuni.hideLoading();\n\t\t\t\t\tlastError = error;\n\t\t\t\t\tconsole.error(`云函数 ${name} 调用失败(第${attemptCount + 1}次):`, error);\n\t\t\t\t\t\n\t\t\t\t\t// 检查是否是超时或网络错误，这些错误值得重试\n\t\t\t\t\tconst isRetryable = error.message && (\n\t\t\t\t\t\terror.message.includes('timeout') || \n\t\t\t\t\t\terror.message.includes('time out') || \n\t\t\t\t\t\terror.message.includes('fail') ||\n\t\t\t\t\t\terror.message.includes('network') ||\n\t\t\t\t\t\terror.message.includes('网络') ||\n\t\t\t\t\t\terror.message.includes('connection')\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\tif (!isRetryable || attemptCount >= retries) {\n\t\t\t\t\t\tconsole.log(`不再重试: ${!isRetryable ? '非可重试错误' : '已达到最大重试次数'}`);\n\t\t\t\t\t\tbreak; // 不可重试的错误或已达到最大重试次数\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 重试前等待一段时间，避免立即重试\n\t\t\t\t\tconst waitTime = 1000 * Math.pow(2, attemptCount); // 指数退避策略\n\t\t\t\t\tconsole.log(`等待 ${waitTime}ms 后重试...`);\n\t\t\t\t\t\n\t\t\t\t\t// 显示重试提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: `请求超时，${Math.round(waitTime/1000)}秒后重试`,\n\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\tduration: waitTime\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, waitTime));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tattemptCount++;\n\t\t\t}\n\t\t\t\n\t\t\t// 所有重试失败后，显示错误并抛出异常\n\t\t\tif (showError) {\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: lastError && lastError.message && lastError.message.includes('time out') ? \n\t\t\t\t\t\t'网络请求超时，请检查网络' : '网络请求失败，请稍后重试',\n\t\t\t\t\ticon: 'none',\n\t\t\t\t\tduration: 3000\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\tthrow lastError;\n\t\t},\n\t\t\n\t\t// 新增降级加载方法\n\t\tasync loadWithFallback() {\n\t\t\ttry {\n\t\t\t\tconst res = await this.callCloudFunction('getInteractions', {\n\t\t\t\t\tuserId: uni.getStorageSync('userId'),\n\t\t\t\t\tpage: this.interactionPage,\n\t\t\t\t\tpageSize: 20\n\t\t\t\t}, {\n\t\t\t\t\ttimeout: 30000,\n\t\t\t\t\tretries: 2\n\t\t\t\t});\n\n\t\t\t\tif (res.result.code === 0) {\n\t\t\t\t\tthis.lastSuccessTime = Date.now();\n\t\t\t\t\tthis.useFallback = false;\n\t\t\t\t\treturn res.result.data;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('主策略失败，尝试降级:', e);\n\t\t\t}\n\n\t\t\tif (Date.now() - this.lastSuccessTime < 300000) {\n\t\t\t\treturn this.fallbackData;\n\t\t\t}\n\t\t\t\n\t\t\tconst cache = uni.getStorageSync('interactionsCache') || [];\n\t\t\treturn {\n\t\t\t\tlist: cache.slice(0, 20),\n\t\t\t\thasMore: cache.length > 20,\n\t\t\t\ttotal: cache.length\n\t\t\t};\n\t\t},\n\t\t\n\t\t// 修改loadInteractions方法，添加保护机制\n\t\tasync loadInteractions(reset = true) {\n\t\t\t\tconst userId = uni.getStorageSync('userId');\n\t\t\t\tif (!userId) {\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '请先登录',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t// 检查是否正在加载，如果是则不重复加载\n\t\t\tif (this.interactionLoading) {\n\t\t\t\tconsole.log('已有互动消息加载任务正在进行，跳过');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconsole.log('开始加载互动消息，设置loading=true');\n\t\t\t\tthis.interactionLoading = true;\n\t\t\t\t\n\t\t\t\tif (reset) {\n\t\t\t\t\tthis.interactionPage = 1;\n\t\t\t\t\tthis.hasMoreInteractions = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconsole.log('加载互动消息, 用户ID:', userId, '页码:', this.interactionPage);\n\t\t\t\t\n\t\t\t\t// 添加调试信息\n\t\t\t\tconsole.log('发送参数:', {\n\t\t\t\t\tuserId,\n\t\t\t\t\tpage: this.interactionPage,\n\t\t\t\t\tpageSize: this.pageSize\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 使用我们优化过的callCloudFunction方法\n\t\t\t\tconst res = await this.callCloudFunction('getInteractions', {\n\t\t\t\t\tuserId,\n\t\t\t\t\tpage: this.interactionPage,\n\t\t\t\t\tpageSize: this.pageSize\n\t\t\t\t}, {\n\t\t\t\t\ttimeout: 30000,\n\t\t\t\t\tretries: 2,\n\t\t\t\t\tshowError: true\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tconsole.log('互动消息响应原始数据:', res);\n\t\t\t\tconsole.log('获取互动消息结果:', JSON.stringify(res.result));\n\t\t\t\t\n\t\t\t\tif (res.result && res.result.code === 0) {\n\t\t\t\t\tconst data = res.result.data || {};\n\t\t\t\t\tconst list = data.list || [];\n\t\t\t\t\tconst hasMore = !!data.hasMore;\n\t\t\t\t\t\n\t\t\t\t\tconsole.log('互动消息列表数量:', list.length, '是否有更多:', hasMore);\n\t\t\t\t\t\n\t\t\t\t\t// 获取已删除的消息ID列表\n\t\t\t\t\tconst deletedIds = uni.getStorageSync('deletedInteractions') || [];\n\t\t\t\t\t\n\t\t\t\t\t// 过滤掉已删除的消息\n\t\t\t\t\tconst filteredList = list.filter(item => !deletedIds.includes(item._id));\n\t\t\t\t\t\n\t\t\t\t\t// 确保每条互动消息有必要的字段\n\t\t\t\t\tconst processedList = filteredList.map(item => {\n\t\t\t\t\t\t// 防止覆盖已存在的处理过的数据\n\t\t\t\t\t\tconst existingItem = this.interactionList.find(existing => existing._id === item._id);\n\t\t\t\t\t\tif (existingItem && existingItem.contentProcessed) {\n\t\t\t\t\t\t\t// 保留已处理的数据，仅更新新数据\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\t\tsenderNickname: item.senderNickname || existingItem.senderNickname || '用户',\n\t\t\t\t\t\t\t\tsenderAvatar: item.senderAvatar || existingItem.senderAvatar || '/static/images/default-avatar.png',\n\t\t\t\t\t\t\t\tdisplayContent: this.formatInteractionContent(item),\n\t\t\t\t\t\t\t\tcreateTime: item.createTime || existingItem.createTime || Date.now(),\n\t\t\t\t\t\t\t\tpostContent: existingItem.postContent,\n\t\t\t\t\t\t\t\tpostImages: existingItem.postImages,\n\t\t\t\t\t\t\t\tcontentProcessed: existingItem.contentProcessed\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 处理新数据\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...item,\n\t\t\t\t\t\t\tsenderNickname: item.senderNickname || '用户',\n\t\t\t\t\t\t\tsenderAvatar: item.senderAvatar || '/static/images/default-avatar.png',\n\t\t\t\t\t\t\tdisplayContent: this.formatInteractionContent(item),\n\t\t\t\t\t\t\tcreateTime: item.createTime || Date.now()\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// 获取帖子内容和图片，确保不会覆盖已处理的数据\n\t\t\t\t\tawait this.enrichInteractionsWithPostData(processedList);\n\t\t\t\t\t\n\t\t\t\t\t// 安全更新列表，不覆盖已处理的内容\n\t\t\t\t\tif (reset) {\n\t\t\t\t\t\tthis.interactionList = processedList;\n\t\t\t\t} else {\n\t\t\t\t\t\t// 合并列表时保留已处理的内容\n\t\t\t\t\t\tconst newList = [...this.interactionList];\n\t\t\t\t\t\tprocessedList.forEach(newItem => {\n\t\t\t\t\t\t\tconst existingIndex = newList.findIndex(item => item._id === newItem._id);\n\t\t\t\t\t\t\tif (existingIndex !== -1) {\n\t\t\t\t\t\t\t\t// 如果已存在，替换为新的但保留处理状态\n\t\t\t\t\t\t\t\tif (newList[existingIndex].contentProcessed) {\n\t\t\t\t\t\t\t\t\tnewItem.contentProcessed = true;\n\t\t\t\t\t\t\t\t\tnewItem.postContent = newList[existingIndex].postContent;\n\t\t\t\t\t\t\t\t\tnewItem.postImages = newList[existingIndex].postImages;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tnewList[existingIndex] = newItem;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// 不存在则添加到列表中\n\t\t\t\t\t\t\t\tnewList.push(newItem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.interactionList = newList;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.hasMoreInteractions = hasMore;\n\t\t\t\t\t\n\t\t\t\t\tif (hasMore && filteredList.length > 0) {\n\t\t\t\t\t\tthis.interactionPage++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 强制更新视图\n\t\t\t\t\tthis.$forceUpdate();\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(res.result?.msg || '获取互动消息失败');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('加载互动消息失败:', error);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: error.message || '加载失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tconsole.log('互动消息加载完成或出错，设置loading=false');\n\t\t\t\tthis.interactionLoading = false;\n\t\t\t\tthis.refreshingInteraction = false;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 修改格式化互动消息内容的方法以匹配数据库中的类型字段\n\t\tformatInteractionContent(item) {\n\t\t\tif (item.displayContent) return item.displayContent;\n\t\t\t\n\t\t\tlet content = item.content || '';\n\t\t\t\n\t\t\t// 根据不同类型进行内容格式化\n\t\t\tswitch(item.type) {\n\t\t\t\tcase 'like_post':\n\t\t\t\t\treturn '点赞了你的帖子';\n\t\t\t\tcase 'like_comment':\n\t\t\t\t\treturn '点赞了你的评论';\n\t\t\t\tcase 'post_comment':\n\t\t\t\t\treturn '评论了你的帖子: ' + (content.length > 20 ? content.substring(0, 20) + '...' : content);\n\t\t\t\tcase 'reply':\n\t\t\t\t\treturn '回复了你的评论: ' + (content.length > 20 ? content.substring(0, 20) + '...' : content);\n\t\t\t\tcase 'mention':\n\t\t\t\t\treturn '在评论中@了你';\n\t\t\t\tcase 'follow':\n\t\t\t\t\treturn '关注了你';\n\t\t\t\tdefault:\n\t\t\t\t\treturn content;\n\t\t\t}\n\t\t},\n\t\t\n\t\tloadMoreInteractions() {\n\t\t\tif (!this.loadingInteractions && !this.noMoreInteractions) {\n\t\t\t\tthis.loadInteractions(false);\n\t\t\t}\n\t\t},\n\t\t\n\t\trefreshInteractions() {\n\t\t\tthis.refreshingInteraction = true;\n\t\t\tthis.loadInteractions(true).then(() => {\n\t\t\t\tthis.refreshingInteraction = false;\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 添加重试加载方法\n\t\treloadInteractions() {\n\t\t\tconsole.log('手动重新加载互动消息');\n\t\t\tthis.loadInteractions(true);\n\t\t},\n\t\t\n\t\t// 聊天消息相关方法\n\t\tasync loadChats(reset = false) {\n\t\t\tconst userId = uni.getStorageSync('userId');\n\t\t\tif (!userId) {\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '请先登录',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查是否正在加载中，避免重复加载\n\t\t\tif (this.chatLoading) {\n\t\t\t\tconsole.log('已有聊天列表加载任务正在进行，跳过');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconsole.log('开始加载聊天列表，设置chatLoading=true');\n\t\t\t\tthis.chatLoading = true;\n\t\t\t\t\n\t\t\t\tif (reset) {\n\t\t\t\t\tthis.chatPage = 1;\n\t\t\t\t\tthis.hasMoreChats = true;\n\t\t\t\t\tthis.chatList = []; // 重置时立即清空列表\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconsole.log('加载聊天列表, 用户ID:', userId, '页码:', this.chatPage);\n\t\t\t\t\n\t\t\t\t// API调用\n\t\t\t\tconst res = await this.callCloudFunction('getChatList', {\n\t\t\t\t\tuserId,\n\t\t\t\t\tpage: this.chatPage,\n\t\t\t\t\tpageSize: this.pageSize\n\t\t\t\t}, {\n\t\t\t\t\ttimeout: 20000,\n\t\t\t\t\tretries: 2\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tconsole.log('获取聊天列表结果:', JSON.stringify(res.result));\n\t\t\t\t\n\t\t\t\tif (res.result && res.result.code === 0) {\n\t\t\t\t\tconst data = res.result.data || {};\n\t\t\t\t\tconst list = data.list || [];\n\t\t\t\t\tconst hasMore = !!data.hasMore;\n\t\t\t\t\t\n\t\t\t\t\tconsole.log('聊天列表数量:', list.length, '是否有更多:', hasMore);\n\t\t\t\t\t\n\t\t\t\t\t// 确保在下一个微任务中更新列表，给视图有时间响应\n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tif (reset) {\n\t\t\t\t\t\t\tthis.chatList = list;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.chatList = [...this.chatList, ...list];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('处理后的聊天列表:', this.chatList.length, '条记录');\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.hasMoreChats = hasMore;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (hasMore && list.length > 0) {\n\t\t\t\t\t\t\tthis.chatPage++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 强制刷新视图\n\t\t\t\t\t\tthis.$forceUpdate();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error((res.result && res.result.msg) || '获取聊天列表失败');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('加载聊天列表失败:', error);\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: error.message || '加载失败',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tconsole.log('聊天列表加载完成或出错，设置chatLoading=false');\n\t\t\t\t// 移除setTimeout，直接设置loading状态\n\t\t\t\tthis.chatLoading = false;\n\t\t\t\tthis.refreshingChat = false;\n\t\t\t}\n\t\t},\n\t\t\n\t\tloadMoreChats() {\n\t\t\tif (this.hasMoreChats && !this.chatLoading) {\n\t\t\t\tthis.loadChats(false);\n\t\t\t}\n\t\t},\n\t\t\n\t\trefreshChats() {\n\t\t\tthis.refreshingChat = true;\n\t\t\tthis.loadChats(true);\n\t\t},\n\t\t\n\t\t// 添加导航到聊天页面的方法\n\t\tnavigateToChat(item) {\n\t\t\ttry {\n\t\t\t\t// 标记消息为已读\n\t\t\t\tthis.markChatRead(item._id);\n\t\t\t\t\n\t\t\t\t// 跳转到聊天页面\n\t\t\tuni.navigateTo({\n\t\t\t\t\turl: `/pages/chat/chat?targetUserId=${item.targetUserId}&targetUserName=${encodeURIComponent(item.targetUserNickname || '用户')}`\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('跳转失败:', e);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 标记聊天为已读\n\t\tasync markChatRead(chatId) {\n\t\t\ttry {\n\t\t\t\tconst userId = uni.getStorageSync('userId');\n\t\t\t\tif (!userId) return;\n\t\t\t\t\n\t\t\t\tconst res = await this.callCloudFunction('markChatRead', {\n\t\t\t\t\tuserId,\n\t\t\t\t\tchatId\n\t\t\t\t}, {\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tretries: 1\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (res.result && res.result.code === 0) {\n\t\t\t\t\t// 更新本地状态\n\t\t\t\t\tconst index = this.chatList.findIndex(item => item._id === chatId);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tthis.$set(this.chatList[index], 'unreadCount', 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('标记已读失败:', e);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 格式化时间显示\n\t\tformatTime(timestamp) {\n\t\t\tif (!timestamp) return '';\n\t\t\t\n\t\t\tconst now = new Date();\n\t\t\tconst msgTime = new Date(timestamp);\n\t\t\tconst diff = now - msgTime;\n\t\t\t\n\t\t\t// 一分钟内\n\t\t\tif (diff < 60 * 1000) {\n\t\t\t\treturn '刚刚';\n\t\t\t}\n\t\t\t\n\t\t\t// 一小时内\n\t\t\tif (diff < 60 * 60 * 1000) {\n\t\t\t\treturn Math.floor(diff / (60 * 1000)) + '分钟前';\n\t\t\t}\n\t\t\t\n\t\t\t// 24小时内\n\t\t\tif (diff < 24 * 60 * 60 * 1000) {\n\t\t\t\treturn Math.floor(diff / (60 * 60 * 1000)) + '小时前';\n\t\t\t}\n\t\t\t\n\t\t\t// 30天内\n\t\t\tif (diff < 30 * 24 * 60 * 60 * 1000) {\n\t\t\t\treturn Math.floor(diff / (24 * 60 * 60 * 1000)) + '天前';\n\t\t\t}\n\t\t\t\n\t\t\t// 大于30天\n\t\t\tconst year = msgTime.getFullYear();\n\t\t\tconst month = (msgTime.getMonth() + 1).toString().padStart(2, '0');\n\t\t\tconst date = msgTime.getDate().toString().padStart(2, '0');\n\t\t\t\n\t\t\treturn `${year}-${month}-${date}`;\n\t\t},\n\t\t\n\t\t// 获取互动类型文本\n\t\tgetInteractionTypeText(type) {\n\t\t\tswitch(type) {\n\t\t\t\tcase 'like_post': return '赞了你的帖子';\n\t\t\t\tcase 'like_comment': return '赞了你的评论';\n\t\t\t\tcase 'post_comment': return '评论了你的帖子';\n\t\t\t\tcase 'reply': return '回复了你的评论';\n\t\t\t\tcase 'mention': return '@了你';\n\t\t\t\tcase 'follow': return '关注了你';\n\t\t\t\tcase 'system': return '系统通知';\n\t\t\t\tdefault: return type || '与你互动'; // 显示原始类型或默认文本\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 跳转到互动详情\n\t\tnavigateToInteraction(item) {\n\t\t\ttry {\n\t\t\t\tconsole.log('跳转到互动详情:', JSON.stringify(item));\n\t\t\t\t\n\t\t\t\t// 标记为已读\n\t\t\t\tthis.markInteractionRead(item._id);\n\t\t\t\t\n\t\t\t\t// 根据不同类型跳转到不同页面\n\t\t\t\tif (item.postId) {\n\t\t\t\t\t// 添加评论ID参数，用于定位到特定评论\n\t\t\t\t\tlet url = `/pages/task/detail?id=${item.postId}`;\n\t\t\t\t\tif (item.commentId) {\n\t\t\t\t\t\turl += `&commentId=${item.commentId}`;\n\t\t\t\t\t}\n\t\t\t\t\tuni.navigateTo({ url });\n\t\t\t\t} else if (item.type === 'follow') {\n\t\t\t\t\t// 关注通知跳转到用户主页\n\t\t\t\t\tuni.navigateTo({\n\t\t\t\t\t\turl: `/pages/user/profile?id=${item.sender}`\n\t\t\t\t\t});\n\t\t\t\t} else if (item.type === 'system') {\n\t\t\t\t\t// 系统通知可能需要特殊处理\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '系统通知',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('无法确定跳转目标，尝试跳转到用户页面:', item);\n\t\t\t\t\t// 如果不确定跳转目标，默认跳转到发送者的主页\n\t\t\t\t\tif (item.sender) {\n\t\t\t\t\t\tuni.navigateTo({\n\t\t\t\t\t\t\turl: `/pages/user/profile?id=${item.sender}`\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '无法跳转',\n\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('跳转失败:', e);\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '跳转失败',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 标记互动消息为已读\n\t\tasync markInteractionRead(messageId) {\n\t\t\tif (!messageId) return;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconst res = await uniCloud.callFunction({\n\t\t\t\t\tname: 'markNotificationRead',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tmessageId,\n\t\t\t\t\t\tuserId: uni.getStorageSync('userId')\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (res.result && res.result.code === 0) {\n\t\t\t\t\t// 在本地更新消息已读状态\n\t\t\t\t\tconst messageIndex = this.interactionList.findIndex(item => item._id === messageId);\n\t\t\t\t\tif (messageIndex !== -1) {\n\t\t\t\t\t\tthis.$set(this.interactionList[messageIndex], 'isRead', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('标记消息已读失败:', error);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 页面返回方法\n\t\tgoBack() {\n\t\t\tuni.navigateBack();\n\t\t},\n\t\t\n\t\t// 显示互动消息操作菜单\n\t\tshowInteractionActions(item) {\n\t\t\ttry {\n\t\t\t\tconst userId = uni.getStorageSync('userId');\n\t\t\t\tif (!userId) {\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '请先登录',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tuni.showActionSheet({\n\t\t\t\t\titemList: ['删除消息'],\n\t\t\t\t\tsuccess: (res) => {\n\t\t\t\t\t\tif (res.tapIndex === 0) {\n\t\t\t\t\t\t\tthis.deleteInteraction(item._id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('显示操作菜单失败:', e);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 删除互动消息\n\t\tasync deleteInteraction(id) {\n\t\t\ttry {\n\t\t\t\tconst userId = uni.getStorageSync('userId');\n\t\t\t\tif (!userId) return;\n\t\t\t\t\n\t\t\t\tuni.showLoading({\n\t\t\t\t\ttitle: '删除中...'\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 调用deleteInteraction云函数\n\t\t\t\tconst res = await this.callCloudFunction('deleteInteraction', {\n\t\t\t\t\tuserId,\n\t\t\t\t\tinteractionId: id\n\t\t\t\t}, {\n\t\t\t\t\ttimeout: 10000,\n\t\t\t\t\tretries: 1\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tuni.hideLoading();\n\t\t\t\t\n\t\t\t\tif (res.result && res.result.code === 0) {\n\t\t\t\t\t// 从列表中移除该条消息\n\t\t\t\t\tthis.interactionList = this.interactionList.filter(item => item._id !== id);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '删除成功',\n\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// 如果云函数调用失败，使用备用方案\n\t\t\t\t\tconsole.warn('删除失败，尝试使用标记已读作为替代方案');\n\t\t\t\t\tthis.interactionList = this.interactionList.filter(item => item._id !== id);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '已从列表中移除',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tuni.hideLoading();\n\t\t\t\tconsole.error('删除互动消息失败:', e);\n\t\t\t\t\n\t\t\t\t// 如果出错，仍然在前端移除\n\t\t\t\tthis.interactionList = this.interactionList.filter(item => item._id !== id);\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '已从列表中移除',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 新增网络检查方法\n\t\tcheckNetwork() {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tuni.getNetworkType({\n\t\t\t\t\tsuccess: res => {\n\t\t\t\t\t\tif (res.networkType === 'none') {\n\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\ttitle: '网络不可用，请检查连接',\n\t\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treject(new Error('network unavailable'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 调试互动消息方法\n\t\tdebugInteractionMessages() {\n\t\t\tthis.debugInteractionState();\n\t\t\t\n\t\t\t// 刷新互动消息\n\t\t\tuni.showModal({\n\t\t\t\ttitle: '互动消息调试',\n\t\t\t\tcontent: `当前有${this.interactionList.length}条互动消息，是否重新加载？`,\n\t\t\t\tconfirmText: '重新加载',\n\t\t\t\tsuccess: (res) => {\n\t\t\t\t\tif (res.confirm) {\n\t\t\t\t\t\tthis.loadInteractions(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 互动状态调试方法\n\t\tdebugInteractionState() {\n\t\t\tconsole.log('===== 互动消息状态调试 =====');\n\t\t\tconst userId = uni.getStorageSync('userId');\n\t\t\tconsole.log('当前用户ID:', userId);\n\t\t\tconsole.log('当前互动消息数量:', this.interactionList.length);\n\t\t\tconsole.log('互动消息加载状态:', this.interactionLoading);\n\t\t\tconsole.log('当前互动页码:', this.interactionPage);\n\t\t\tconsole.log('是否有更多互动数据:', this.hasMoreInteractions);\n\t\t\t\n\t\t\t// 手动查询一条notifications示例记录以验证数据结构\n\t\t\tuniCloud.callFunction({\n\t\t\t\tname: 'getNotificationSample',\n\t\t\t\tdata: { limit: 3 }\n\t\t\t}).then(res => {\n\t\t\t\tconsole.log('notifications表样本数据:', res.result);\n\t\t\t\t\n\t\t\t\tif (res.result && res.result.data && res.result.data.length > 0) {\n\t\t\t\t\tconsole.log('数据结构验证:');\n\t\t\t\t\tconsole.log('- receiver字段:', res.result.data[0].receiver);\n\t\t\t\t\tconsole.log('- sender字段:', res.result.data[0].sender);\n\t\t\t\t\tconsole.log('- type字段:', res.result.data[0].type);\n\t\t\t\t}\n\t\t\t}).catch(err => {\n\t\t\t\tconsole.error('获取notifications表数据失败:', err);\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 预览帖子图片\n\t\tpreviewPostImage(images, currentIndex, event) {\n\t\t\tif (event) {\n\t\t\t\tevent.stopPropagation(); // 阻止事件冒泡\n\t\t\t}\n\t\t\t\n\t\t\tif (!images || images.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('预览帖子图片:', images);\n\t\t\t\n\t\t\t// 筛选出有效的图片URL\n\t\t\tconst validImages = images.filter(img => \n\t\t\t\ttypeof img === 'string' && (img.startsWith('http') || img.startsWith('/'))\n\t\t\t);\n\t\t\t\n\t\t\tif (validImages.length === 0) {\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '没有可预览的图片',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tuni.previewImage({\n\t\t\t\turls: validImages,\n\t\t\t\tcurrent: validImages[currentIndex] || validImages[0],\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tconsole.log('帖子图片预览成功');\n\t\t\t\t},\n\t\t\t\tfail: function(err) {\n\t\t\t\t\tconsole.error('帖子图片预览失败:', err);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '图片预览失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 预览评论图片\n\t\tpreviewCommentImage(fileIDs, event) {\n\t\t\tif (event) {\n\t\t\t\tevent.stopPropagation(); // 阻止事件冒泡\n\t\t\t}\n\t\t\t\n\t\t\tif (!fileIDs || fileIDs.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('预览评论图片:', fileIDs);\n\t\t\t\n\t\t\tuni.previewImage({\n\t\t\t\turls: fileIDs,\n\t\t\t\tcurrent: fileIDs[0],\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tconsole.log('评论图片预览成功');\n\t\t\t\t},\n\t\t\t\tfail: function(err) {\n\t\t\t\t\tconsole.error('评论图片预览失败:', err);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '图片预览失败',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 显示删除确认对话框\n\t\tshowDeleteConfirm(item, index) {\n\t\t\tuni.showModal({\n\t\t\t\ttitle: '删除提示',\n\t\t\t\tcontent: '删除后，该条消息将不再显示',\n\t\t\t\tconfirmText: '确认删除',\n\t\t\t\tconfirmColor: '#FF5252',\n\t\t\t\tsuccess: (res) => {\n\t\t\t\t\tif (res.confirm) {\n\t\t\t\t\t\tthis.deleteInteractionLocally(item._id, index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 本地删除互动消息（不调用云函数）\n\t\tdeleteInteractionLocally(id, index) {\n\t\t\t// 直接从本地列表中移除\n\t\t\tthis.interactionList.splice(index, 1);\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '已删除',\n\t\t\t\ticon: 'success'\n\t\t\t});\n\t\t\t\n\t\t\t// 可以选择在本地存储中标记该消息已删除，以防页面刷新后重新加载\n\t\t\ttry {\n\t\t\t\tlet deletedIds = uni.getStorageSync('deletedInteractions') || [];\n\t\t\t\tdeletedIds.push(id);\n\t\t\t\tuni.setStorageSync('deletedInteractions', deletedIds);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('存储删除记录失败:', e);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 修改 enrichInteractionsWithPostData 方法\n\t\tasync enrichInteractionsWithPostData(interactions) {\n\t\t\t// 提取所有帖子ID\n\t\t\tconst postIds = interactions\n\t\t\t\t.filter(item => item.postId)\n\t\t\t\t.map(item => item.postId);\n\t\t\t\n\t\t\tif (postIds.length === 0) return;\n\t\t\t\n\t\t\ttry {\n\t\t\t\t// 先尝试从本地缓存获取帖子内容\n\t\t\t\tconst cachedPosts = uni.getStorageSync('cachedPosts') || {};\n\t\t\t\tlet hasAllCached = true;\n\t\t\t\t\n\t\t\t\t// 检查是否所有需要的帖子都已缓存\n\t\t\t\tfor (const postId of postIds) {\n\t\t\t\t\tif (!cachedPosts[postId]) {\n\t\t\t\t\t\thasAllCached = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 使用缓存或重新获取帖子数据\n\t\t\t\tlet postMap = {};\n\t\t\t\tif (hasAllCached) {\n\t\t\t\t\tconsole.log('使用缓存的帖子数据');\n\t\t\t\t\tpostMap = cachedPosts;\n\t\t\t\t} else {\n\t\t\t\t\t// 批量获取帖子信息\n\t\t\t\t\tconst postRes = await uniCloud.callFunction({\n\t\t\t\t\t\tname: 'getBatchPosts',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tpostIds: postIds\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttimeout: 30000 // 增加超时时间\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif (postRes.result && postRes.result.code === 0) {\n\t\t\t\t\t\tconst posts = postRes.result.data || [];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 创建帖子ID到帖子的映射\n\t\t\t\t\t\tposts.forEach(post => {\n\t\t\t\t\t\t\tif (post._id) {\n\t\t\t\t\t\t\t\tpostMap[post._id] = post;\n\t\t\t\t\t\t\t\t// 更新缓存\n\t\t\t\t\t\t\t\tcachedPosts[post._id] = post;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 保存到本地缓存\n\t\t\t\t\t\tuni.setStorageSync('cachedPosts', cachedPosts);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 获取失败时，尝试单独获取每个帖子\n\t\t\t\t\t\tconsole.log('批量获取失败，尝试单独获取每个帖子');\n\t\t\t\t\t\tawait this.fetchPostsIndividually(postIds, postMap, cachedPosts);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 确保稳定地为每条互动消息添加帖子内容和图片\n\t\t\t\tinteractions.forEach(item => {\n\t\t\t\t\tif (item.postId && postMap[item.postId]) {\n\t\t\t\t\t\tconst post = postMap[item.postId];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 设置帖子内容，不再截断\n\t\t\t\t\t\titem.postContent = post.content || '查看帖子详情';\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 设置帖子图片\n\t\t\t\t\t\titem.postImages = Array.isArray(post.images) ? post.images : [];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 标记为已处理，防止被覆盖\n\t\t\t\t\t\titem.contentProcessed = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 立即应用更新以防止被覆盖\n\t\t\t\tthis.$forceUpdate();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('获取帖子信息失败:', error);\n\t\t\t\t// 出错时也尝试单独获取每个帖子\n\t\t\t\tconst cachedPosts = uni.getStorageSync('cachedPosts') || {};\n\t\t\t\tconst postMap = {};\n\t\t\t\tawait this.fetchPostsIndividually(postIds, postMap, cachedPosts);\n\t\t\t\t\n\t\t\t\t// 再次尝试应用数据\n\t\t\t\tinteractions.forEach(item => {\n\t\t\t\t\tif (item.postId && postMap[item.postId]) {\n\t\t\t\t\t\tconst post = postMap[item.postId];\n\t\t\t\t\t\titem.postContent = post.content || '查看帖子详情';\n\t\t\t\t\t\titem.postImages = Array.isArray(post.images) ? post.images : [];\n\t\t\t\t\t\titem.contentProcessed = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tthis.$forceUpdate();\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 添加单独获取帖子的方法\n\t\tasync fetchPostsIndividually(postIds, postMap, cachedPosts) {\n\t\t\tfor (const postId of postIds) {\n\t\t\t\t// 如果已缓存，直接使用缓存\n\t\t\t\tif (cachedPosts[postId]) {\n\t\t\t\t\tpostMap[postId] = cachedPosts[postId];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tconst singlePostRes = await uniCloud.callFunction({\n\t\t\t\t\t\tname: 'getPostDetail',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tpostId: postId\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif (singlePostRes.result && singlePostRes.result.code === 0) {\n\t\t\t\t\t\tconst post = singlePostRes.result.data;\n\t\t\t\t\t\tif (post) {\n\t\t\t\t\t\t\tpostMap[postId] = post;\n\t\t\t\t\t\t\tcachedPosts[postId] = post;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(`获取帖子 ${postId} 失败:`, err);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 更新缓存\n\t\t\tuni.setStorageSync('cachedPosts', cachedPosts);\n\t\t\treturn postMap;\n\t\t},\n\t\t\n\t\t// 显示聊天消息删除确认对话框\n\t\tshowChatDeleteConfirm(item, index) {\n\t\t\tuni.showModal({\n\t\t\t\ttitle: '删除提示',\n\t\t\t\tcontent: '确定要删除该会话吗？',\n\t\t\t\tconfirmText: '删除',\n\t\t\t\tconfirmColor: '#FF5252',\n\t\t\t\tsuccess: (res) => {\n\t\t\t\t\tif (res.confirm) {\n\t\t\t\t\t\tthis.deleteChatSession(item._id, index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 删除聊天会话\n\t\tasync deleteChatSession(chatId, index) {\n\t\t\ttry {\n\t\t\t\tuni.showLoading({ title: '删除中...' });\n\t\t\t\t\n\t\t\t\tconst userId = uni.getStorageSync('userId');\n\t\t\t\tconst res = await uniCloud.callFunction({\n\t\t\t\t\tname: 'deleteChatSession',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\tchatId\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tuni.hideLoading();\n\t\t\t\t\n\t\t\t\tif (res.result && res.result.code === 0) {\n\t\t\t\t\t// 从列表中删除该项\n\t\t\t\t\tthis.chatList.splice(index, 1);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '删除成功',\n\t\t\t\t\t\ticon: 'success'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// 删除失败时也在本地删除（用户体验考虑）\n\t\t\t\t\tthis.chatList.splice(index, 1);\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '已从列表中移除',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tuni.hideLoading();\n\t\t\t\tconsole.error('删除聊天会话失败:', error);\n\t\t\t\t\n\t\t\t\t// 出错时也在本地删除（用户体验考虑）\n\t\t\t\tthis.chatList.splice(index, 1);\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '已从列表中移除',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n</script>\n\n<style>\n/* 添加安全区域适配 */\n.safe-area {\n\tpadding-top: calc(var(--status-bar-height, 44px) + 10px);\n}\n\n.container {\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: 100vh;\n\tbackground-color: #f8f8f8;\n\tpadding-top: 20rpx;\n}\n\n/* 消息分类导航样式 */\n.message-nav {\n\tbackground-color: #ffffff;\n\tpadding: 20rpx 0;\n\toverflow: hidden;\n\tmargin-bottom: 10rpx;\n\tborder-radius: 0 0 20rpx 20rpx;\n\tbox-shadow: 0 4rpx 10rpx rgba(0, 0, 0, 0.03);\n}\n\n.nav-buttons {\n\tdisplay: flex;\n\tjustify-content: space-around;\n\talign-items: center;\n\tpadding: 0 20rpx;\n\theight: 120rpx;\n}\n\n.nav-button {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tposition: relative;\n\ttransition: transform 0.2s ease;\n\tpadding: 10rpx 30rpx;\n}\n\n.nav-button.active {\n\ttransform: scale(1.05);\n}\n\n.icon-circle {\n\twidth: 80rpx;\n\theight: 80rpx;\n\tborder-radius: 50%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tmargin-bottom: 12rpx;\n\ttransition: all 0.2s ease;\n}\n\n.icon-text {\n\tfont-size: 36rpx;\n}\n\n.interaction-icon {\n\tbackground: linear-gradient(135deg, #a8c7ff, #6FA3FF);\n\tbox-shadow: 0 4rpx 12rpx rgba(111, 163, 255, 0.15);\n}\n\n.interaction-icon.active {\n\tbackground: linear-gradient(135deg, #6FA3FF, #4985FF);\n\tbox-shadow: 0 6rpx 16rpx rgba(73, 133, 255, 0.25);\n}\n\n.chat-icon {\n\tbackground: linear-gradient(135deg, #a5f0c5, #4DDC95);\n\tbox-shadow: 0 4rpx 12rpx rgba(77, 220, 149, 0.15);\n}\n\n.chat-icon.active {\n\tbackground: linear-gradient(135deg, #4DDC95, #35C77D);\n\tbox-shadow: 0 6rpx 16rpx rgba(53, 199, 125, 0.25);\n}\n\n.system-icon {\n\tbackground: linear-gradient(135deg, #ffb3b3, #ff8080);\n\tbox-shadow: 0 4rpx 12rpx rgba(255, 128, 128, 0.15);\n}\n\n.system-icon.active {\n\tbackground: linear-gradient(135deg, #ff8080, #ff5252);\n\tbox-shadow: 0 6rpx 16rpx rgba(255, 82, 82, 0.25);\n}\n\n.nav-text {\n\tfont-size: 26rpx;\n\tcolor: #666;\n}\n\n.nav-button.active .nav-text {\n\tcolor: #333;\n\tfont-weight: 500;\n}\n\n.content-area {\n\tflex: 1;\n\toverflow: hidden;\n\tpadding-bottom: calc(env(safe-area-inset-bottom) + 120rpx); /* 增加底部留白 */\n}\n\n.message-list {\n\theight: 100%;\n\toverflow-y: auto;\n\t-webkit-overflow-scrolling: touch;\n}\n\n/* 互动消息样式优化 */\n.interaction-list {\n\tpadding: 20rpx 30rpx;\n}\n\n.interaction-item {\n\tdisplay: flex;\n\tpadding: 24rpx;\n\tbackground-color: #fff;\n\tborder-radius: 16rpx;\n\tmargin-bottom: 20rpx;\n\tposition: relative;\n\tbox-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.03);\n\talign-items: flex-start;\n}\n\n.avatar {\n\twidth: 80rpx;\n\theight: 80rpx;\n\tborder-radius: 50%;\n\tmargin-right: 20rpx;\n\tflex-shrink: 0;\n}\n\n.interaction-content {\n\tflex: 1;\n\tmin-width: 0;\n}\n\n.interaction-header {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tmargin-bottom: 10rpx;\n}\n\n.nickname {\n\tfont-size: 28rpx;\n\tcolor: #333;\n\tfont-weight: 500;\n}\n\n.time {\n\tfont-size: 24rpx;\n\tcolor: #999;\n}\n\n.interaction-body {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.content {\n\tfont-size: 28rpx;\n\tcolor: #666;\n\tline-height: 1.5;\n\tmargin-bottom: 10rpx;\n}\n\n/* 互动消息中的帖子内容 */\n.interaction-meta {\n\tmargin-top: 16rpx;\n\tbackground-color: #f8f8f8;\n\tborder-radius: 12rpx;\n\tpadding: 16rpx;\n\tborder-left: 4rpx solid #e0e0e0;\n\ttransition: background-color 0.3s;\n\tposition: relative;\n}\n\n.interaction-post-info {\n\tdisplay: flex;\n\talign-items: flex-start;\n\tfont-size: 26rpx;\n\tcolor: #666;\n}\n\n.interaction-post-info text {\n\tmargin-left: 8rpx;\n\tflex: 1;\n\tline-height: 1.5;\n\tword-break: break-all;\n\tdisplay: -webkit-box;\n\t-webkit-line-clamp: 3;\n\t-webkit-box-orient: vertical;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n}\n\n/* 帖子图片显示 */\n.post-images {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tmargin-top: 12rpx;\n\tgap: 8rpx;\n}\n\n.post-image {\n\twidth: 150rpx;\n\theight: 150rpx;\n\tborder-radius: 8rpx;\n\toverflow: hidden;\n\tposition: relative;\n}\n\n.post-image image {\n\twidth: 100%;\n\theight: 100%;\n\tobject-fit: cover;\n}\n\n.more-images {\n\tdisplay: inline-flex;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 150rpx;\n\theight: 150rpx;\n\tborder-radius: 8rpx;\n\tbackground-color: rgba(0, 0, 0, 0.05);\n\tcolor: #666;\n\tfont-size: 24rpx;\n}\n\n/* 评论图片样式 */\n.interaction-image {\n\twidth: 180rpx;\n\theight: 180rpx;\n\tborder-radius: 12rpx;\n\toverflow: hidden;\n\tmargin-top: 10rpx;\n\tmargin-bottom: 10rpx;\n}\n\n.interaction-image image {\n\twidth: 100%;\n\theight: 100%;\n\tobject-fit: cover;\n}\n\n.unread-dot {\n\tposition: absolute;\n\ttop: 20rpx;\n\tright: 20rpx;\n\twidth: 16rpx;\n\theight: 16rpx;\n\tborder-radius: 50%;\n\tbackground-color: #ff5252;\n}\n\n/* 聊天列表样式 */\n.chat-list {\n\tpadding: 20rpx 30rpx;\n}\n\n.chat-item {\n\tdisplay: flex;\n\tpadding: 24rpx;\n\tbackground-color: #fff;\n\tborder-radius: 16rpx;\n\tmargin-bottom: 20rpx;\n\tposition: relative;\n\tbox-shadow: 0 2rpx 10rpx rgba(0, 0, 0, 0.03);\n\talign-items: center;\n}\n\n.chat-content {\n\tflex: 1;\n\tmin-width: 0;\n}\n\n.chat-header {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tmargin-bottom: 8rpx;\n}\n\n.chat-body {\n\tdisplay: flex;\n\talign-items: center;\n}\n\n.last-message {\n\tfont-size: 26rpx;\n\tcolor: #999;\n\twidth: 100%;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n}\n\n.unread-badge {\n\tmin-width: 36rpx;\n\theight: 36rpx;\n\tline-height: 36rpx;\n\tpadding: 0 8rpx;\n\tbackground-color: #FF5252;\n\tcolor: #fff;\n\tborder-radius: 18rpx;\n\tfont-size: 22rpx;\n\ttext-align: center;\n\tmargin-left: 16rpx;\n}\n\n.empty-tip {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\theight: 100%;\n\tcolor: #999;\n\tfont-size: 28rpx;\n}\n\n.loading-more {\n\ttext-align: center;\n\tpadding: 20rpx 0;\n\tcolor: #999;\n\tfont-size: 24rpx;\n}\n\n/* 顶部导航栏样式 */\n.header {\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 10rpx;\n\tbackground-color: #ffffff;\n\tborder-bottom: 1px solid #eee;\n}\n\n.header-left {\n\tpadding: 0 10rpx;\n}\n\n.header-title {\n\tflex: 1;\n\tfont-size: 32rpx;\n\tfont-weight: 500;\n\ttext-align: center;\n}\n\n.header-right {\n\tpadding: 0 10rpx;\n}\n\n/* 调试工具样式 */\n.debug-tools {\n\tpadding: 20rpx;\n\ttext-align: center;\n}\n\n.debug-btn {\n\tfont-size: 24rpx;\n\tpadding: 10rpx 20rpx;\n\tbackground-color: #f5f5f5;\n\tcolor: #666;\n}\n\n/* 添加帖子图片样式 */\n.post-image {\n\tmargin-top: 10rpx;\n\twidth: 160rpx;\n\theight: 160rpx;\n\tborder-radius: 12rpx;\n\toverflow: hidden;\n\tbackground-color: #f5f5f5;\n\tposition: relative;\n}\n\n.post-image image {\n\twidth: 100%;\n\theight: 100%;\n\tobject-fit: cover;\n\tborder-radius: 12rpx;\n}\n\n/* 添加一些操作提示样式 */\n.chat-item:active, .interaction-item:active {\n\topacity: 0.8;\n\ttransform: scale(0.98);\n\ttransition: all 0.2s ease;\n}\n\n.delete-tip {\n\tposition: absolute;\n\ttop: 50%;\n\tright: 30rpx;\n\ttransform: translateY(-50%);\n\tbackground-color: rgba(255, 82, 82, 0.1);\n\tcolor: #FF5252;\n\tpadding: 4rpx 12rpx;\n\tborder-radius: 8rpx;\n\tfont-size: 22rpx;\n\topacity: 0;\n\ttransition: opacity 0.3s ease;\n}\n\n.chat-item.active .delete-tip, .interaction-item.active .delete-tip {\n\topacity: 1;\n}\n\n/* 添加加载和已加载状态样式区分 */\n.interaction-meta::after {\n\tcontent: '';\n\tposition: absolute;\n\twidth: 100%;\n\theight: 100%;\n\ttop: 0;\n\tleft: 0;\n\tbackground-color: rgba(0, 0, 0, 0.02);\n\tborder-radius: 12rpx;\n\topacity: 0;\n\ttransition: opacity 0.3s;\n}\n\n.interaction-meta:active::after {\n\topacity: 1;\n}\n</style> ","import mod from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./message.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\mini-css-extract-plugin\\\\dist\\\\loader.js??ref--6-oneOf-1-0!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js??ref--6-oneOf-1-1!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\loaders\\\\stylePostLoader.js!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\webpack-preprocess-loader\\\\index.js??ref--6-oneOf-1-2!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\postcss-loader\\\\src\\\\index.js??ref--6-oneOf-1-3!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\vue-cli-plugin-uni\\\\packages\\\\vue-loader\\\\lib\\\\index.js??vue-loader-options!D:\\\\Hbuilderx\\\\plugins\\\\uniapp-cli\\\\node_modules\\\\@dcloudio\\\\webpack-uni-mp-loader\\\\lib\\\\style.js!./message.vue?vue&type=style&index=0&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1743160579705\n      var cssReload = require(\"D:/Hbuilderx/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}